{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/ports/in/donor/createDonor.useCase.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CreateDonorUseCase } from './createDonor.useCase';\nimport { DonorRepositoryPort } from '../../out/donor-repository.port';\nimport { DONOR_REPOSITORY } from '../../../../constants';\nimport { Donor } from '../../../core/domain/donor.entity';\n\ndescribe('CreateDonorUseCase', () => {\n  let useCase: CreateDonorUseCase;\n  let donorRepository: jest.Mocked<DonorRepositoryPort>;\n\n  beforeEach(async () => {\n    const mockDonorRepository = {\n      save: jest.fn(),\n      findById: jest.fn(),\n      findByUserId: jest.fn(),\n      update: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CreateDonorUseCase,\n        {\n          provide: DONOR_REPOSITORY,\n          useValue: mockDonorRepository,\n        },\n      ],\n    }).compile();\n\n    useCase = module.get<CreateDonorUseCase>(CreateDonorUseCase);\n    donorRepository = module.get(DONOR_REPOSITORY);\n  });\n\n  describe('execute', () => {\n    const validDonorData: Omit<Donor, 'id'> = {\n      cpf: '123.456.789-00',\n      bloodType: 'O+',\n      birthDate: new Date('1990-05-15'),\n      fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n    };\n\n    it('should create a new donor successfully', async () => {\n      const savedDonor: Donor = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        ...validDonorData,\n      };\n\n      donorRepository.save.mockResolvedValue(savedDonor);\n\n      const result = await useCase.execute(validDonorData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(savedDonor);\n      expect(donorRepository.save).toHaveBeenCalledWith(validDonorData);\n    });\n\n    it('should handle all blood types', async () => {\n      const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\n\n      for (const bloodType of bloodTypes) {\n        const donorData: Omit<Donor, 'id'> = { ...validDonorData, bloodType };\n        const savedDonor: Donor = { id: `donor-${bloodType}`, ...donorData };\n\n        donorRepository.save.mockResolvedValue(savedDonor);\n\n        const result = await useCase.execute(donorData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.bloodType).toBe(bloodType);\n        expect(donorRepository.save).toHaveBeenCalledWith(donorData);\n      }\n    });\n\n    it('should handle different CPF formats', async () => {\n      const cpfFormats = [\n        '123.456.789-00',\n        '12345678900',\n        '987.654.321-11',\n        '98765432111',\n      ];\n\n      for (const cpf of cpfFormats) {\n        const donorData: Omit<Donor, 'id'> = { ...validDonorData, cpf };\n        const savedDonor: Donor = {\n          id: `donor-${cpf.replace(/\\D/g, '')}`,\n          ...donorData,\n        };\n\n        donorRepository.save.mockResolvedValue(savedDonor);\n\n        const result = await useCase.execute(donorData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.cpf).toBe(cpf);\n      }\n    });\n\n    it('should handle different birth dates', async () => {\n      const birthDates = [\n        new Date('1980-01-01'),\n        new Date('1995-12-31'),\n        new Date('2000-06-15'),\n        new Date('1975-03-20'),\n        new Date('2005-09-10'), // Young donor\n      ];\n\n      for (const birthDate of birthDates) {\n        const donorData: Omit<Donor, 'id'> = { ...validDonorData, birthDate };\n        const savedDonor: Donor = {\n          id: `donor-${birthDate.getFullYear()}`,\n          ...donorData,\n        };\n\n        donorRepository.save.mockResolvedValue(savedDonor);\n\n        const result = await useCase.execute(donorData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.birthDate).toBe(birthDate);\n      }\n    });\n\n    it('should handle different user IDs', async () => {\n      const userIds = [\n        '123e4567-e89b-12d3-a456-426614174000',\n        '987e6543-e21b-34d5-a678-426614174111',\n        '456f7890-f12c-45e6-b789-426614174222',\n        '789a0123-a34b-56c7-d890-426614174333',\n      ];\n\n      for (const fkUserId of userIds) {\n        const donorData: Omit<Donor, 'id'> = { ...validDonorData, fkUserId };\n        const savedDonor: Donor = {\n          id: `donor-${fkUserId.slice(0, 8)}`,\n          ...donorData,\n        };\n\n        donorRepository.save.mockResolvedValue(savedDonor);\n\n        const result = await useCase.execute(donorData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.fkUserId).toBe(fkUserId);\n      }\n    });\n\n    it('should handle universal donor blood type', async () => {\n      const universalDonorData: Omit<Donor, 'id'> = {\n        ...validDonorData,\n        bloodType: 'O-',\n      };\n\n      const savedDonor: Donor = {\n        id: 'universal-donor',\n        ...universalDonorData,\n      };\n      donorRepository.save.mockResolvedValue(savedDonor);\n\n      const result = await useCase.execute(universalDonorData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.bloodType).toBe('O-');\n    });\n\n    it('should handle universal recipient blood type', async () => {\n      const universalRecipientData: Omit<Donor, 'id'> = {\n        ...validDonorData,\n        bloodType: 'AB+',\n      };\n\n      const savedDonor: Donor = {\n        id: 'universal-recipient',\n        ...universalRecipientData,\n      };\n      donorRepository.save.mockResolvedValue(savedDonor);\n\n      const result = await useCase.execute(universalRecipientData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.bloodType).toBe('AB+');\n    });\n\n    it('should handle age-related scenarios', async () => {\n      const today = new Date();\n\n      // 18 years old (minimum age for donation)\n      const eighteenYearsAgo = new Date(\n        today.getFullYear() - 18,\n        today.getMonth(),\n        today.getDate(),\n      );\n\n      // 65 years old (maximum age for donation)\n      const sixtyFiveYearsAgo = new Date(\n        today.getFullYear() - 65,\n        today.getMonth(),\n        today.getDate(),\n      );\n\n      const youngDonorData: Omit<Donor, 'id'> = {\n        ...validDonorData,\n        birthDate: eighteenYearsAgo,\n      };\n\n      const seniorDonorData: Omit<Donor, 'id'> = {\n        ...validDonorData,\n        birthDate: sixtyFiveYearsAgo,\n        fkUserId: '456f7890-f12c-45e6-b789-426614174222',\n      };\n\n      const youngSavedDonor: Donor = { id: 'young-donor', ...youngDonorData };\n      const seniorSavedDonor: Donor = {\n        id: 'senior-donor',\n        ...seniorDonorData,\n      };\n\n      donorRepository.save\n        .mockResolvedValueOnce(youngSavedDonor)\n        .mockResolvedValueOnce(seniorSavedDonor);\n\n      const youngResult = await useCase.execute(youngDonorData);\n      const seniorResult = await useCase.execute(seniorDonorData);\n\n      expect(youngResult.isSuccess).toBe(true);\n      expect(youngResult.value?.birthDate).toBe(eighteenYearsAgo);\n      expect(seniorResult.isSuccess).toBe(true);\n      expect(seniorResult.value?.birthDate).toBe(sixtyFiveYearsAgo);\n    });\n\n    it('should handle repository errors gracefully', async () => {\n      donorRepository.save.mockRejectedValue(\n        new Error('Database connection failed'),\n      );\n\n      await expect(useCase.execute(validDonorData)).rejects.toThrow(\n        'Database connection failed',\n      );\n      expect(donorRepository.save).toHaveBeenCalledWith(validDonorData);\n    });\n\n    it('should handle edge case CPF values', async () => {\n      const edgeCaseCpfs = [\n        '000.000.000-00',\n        '111.111.111-11',\n        '999.999.999-99',\n      ];\n\n      for (const cpf of edgeCaseCpfs) {\n        const donorData: Omit<Donor, 'id'> = { ...validDonorData, cpf };\n        const savedDonor: Donor = {\n          id: `edge-${cpf.replace(/\\D/g, '')}`,\n          ...donorData,\n        };\n\n        donorRepository.save.mockResolvedValue(savedDonor);\n\n        const result = await useCase.execute(donorData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.cpf).toBe(cpf);\n      }\n    });\n\n    it('should handle blood type compatibility scenarios', async () => {\n      const compatibilityTests = [\n        {\n          bloodType: 'O-',\n          canDonateTo: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],\n        },\n        { bloodType: 'O+', canDonateTo: ['A+', 'B+', 'AB+', 'O+'] },\n        { bloodType: 'A-', canDonateTo: ['A+', 'A-', 'AB+', 'AB-'] },\n        { bloodType: 'AB+', canDonateTo: ['AB+'] },\n      ];\n\n      for (const test of compatibilityTests) {\n        const donorData: Omit<Donor, 'id'> = {\n          ...validDonorData,\n          bloodType: test.bloodType,\n          fkUserId: `user-${test.bloodType.replace(/[+-]/g, '')}`,\n        };\n\n        const savedDonor: Donor = {\n          id: `donor-${test.bloodType}`,\n          ...donorData,\n        };\n        donorRepository.save.mockResolvedValue(savedDonor);\n\n        const result = await useCase.execute(donorData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.bloodType).toBe(test.bloodType);\n        // Note: Actual compatibility logic would be in a service, not the use case\n      }\n    });\n\n    it('should handle concurrent donor creation', async () => {\n      const donorDataList = Array(5)\n        .fill(null)\n        .map((_, index) => ({\n          ...validDonorData,\n          cpf: `123.456.789-0${index}`,\n          fkUserId: `user-${index}`,\n        }));\n\n      const savedDonors = donorDataList.map((data, index) => ({\n        id: `donor-${index}`,\n        ...data,\n      }));\n\n      donorRepository.save\n        .mockResolvedValueOnce(savedDonors[0])\n        .mockResolvedValueOnce(savedDonors[1])\n        .mockResolvedValueOnce(savedDonors[2])\n        .mockResolvedValueOnce(savedDonors[3])\n        .mockResolvedValueOnce(savedDonors[4]);\n\n      const promises = donorDataList.map((data) => useCase.execute(data));\n      const results = await Promise.all(promises);\n\n      results.forEach((result, index) => {\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.cpf).toBe(donorDataList[index].cpf);\n      });\n\n      expect(donorRepository.save).toHaveBeenCalledTimes(5);\n    });\n\n    it('should handle birth date edge cases', async () => {\n      const today = new Date();\n      const leap = new Date(2000, 1, 29); // Leap year date\n      const endOfYear = new Date(1999, 11, 31); // End of year\n      const startOfYear = new Date(2000, 0, 1); // Start of year\n\n      const edgeDates = [leap, endOfYear, startOfYear];\n\n      for (const birthDate of edgeDates) {\n        const donorData: Omit<Donor, 'id'> = {\n          ...validDonorData,\n          birthDate,\n          fkUserId: `user-${birthDate.getTime()}`,\n        };\n\n        const savedDonor: Donor = {\n          id: `donor-${birthDate.getTime()}`,\n          ...donorData,\n        };\n        donorRepository.save.mockResolvedValue(savedDonor);\n\n        const result = await useCase.execute(donorData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.birthDate).toBe(birthDate);\n      }\n    });\n  });\n});\n"],"names":["describe","useCase","donorRepository","beforeEach","mockDonorRepository","save","jest","fn","findById","findByUserId","update","module","Test","createTestingModule","providers","CreateDonorUseCase","provide","DONOR_REPOSITORY","useValue","compile","get","validDonorData","cpf","bloodType","birthDate","Date","fkUserId","it","savedDonor","id","mockResolvedValue","result","execute","expect","isSuccess","toBe","value","toEqual","toHaveBeenCalledWith","bloodTypes","donorData","cpfFormats","replace","birthDates","getFullYear","userIds","slice","universalDonorData","universalRecipientData","today","eighteenYearsAgo","getMonth","getDate","sixtyFiveYearsAgo","youngDonorData","seniorDonorData","youngSavedDonor","seniorSavedDonor","mockResolvedValueOnce","youngResult","seniorResult","mockRejectedValue","Error","rejects","toThrow","edgeCaseCpfs","compatibilityTests","canDonateTo","test","donorDataList","Array","fill","map","_","index","savedDonors","data","promises","results","Promise","all","forEach","toHaveBeenCalledTimes","leap","endOfYear","startOfYear","edgeDates","getTime"],"mappings":"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"}