f2e12f2921ca37c4cf348f55aa43758f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _testing = require("@nestjs/testing");
const _hashStringuseCase = require("./hashString.useCase");
const _constants = require("../../../constants");
describe('HashStringUseCase', ()=>{
    let useCase;
    let hashRepository;
    beforeEach(async ()=>{
        const mockHashRepository = {
            hash: jest.fn(),
            compare: jest.fn()
        };
        const module = await _testing.Test.createTestingModule({
            providers: [
                _hashStringuseCase.HashStringUseCase,
                {
                    provide: _constants.HASH_REPOSITORY,
                    useValue: mockHashRepository
                }
            ]
        }).compile();
        useCase = module.get(_hashStringuseCase.HashStringUseCase);
        hashRepository = module.get(_constants.HASH_REPOSITORY);
    });
    describe('execute', ()=>{
        it('should hash a password successfully', ()=>{
            const password = 'mySecretPassword123';
            const hashedPassword = 'salt:hashedPassword123';
            hashRepository.hash.mockReturnValue(hashedPassword);
            const result = useCase.execute(password);
            expect(result).toBe(hashedPassword);
            expect(hashRepository.hash).toHaveBeenCalledWith(password);
        });
        it('should handle empty password', ()=>{
            const password = '';
            const hashedPassword = 'salt:hashedEmptyString';
            hashRepository.hash.mockReturnValue(hashedPassword);
            const result = useCase.execute(password);
            expect(result).toBe(hashedPassword);
            expect(hashRepository.hash).toHaveBeenCalledWith(password);
        });
        it('should handle different password lengths', ()=>{
            const passwords = [
                'a',
                'short',
                'mediumLengthPassword123',
                'veryLongPasswordWithManyCharactersAndNumbers123456789'
            ];
            passwords.forEach((password, index)=>{
                const hashedPassword = `salt:hashed_${index}`;
                hashRepository.hash.mockReturnValue(hashedPassword);
                const result = useCase.execute(password);
                expect(result).toBe(hashedPassword);
                expect(hashRepository.hash).toHaveBeenCalledWith(password);
            });
        });
        it('should handle passwords with special characters', ()=>{
            const specialPasswords = [
                'password@123',
                'p@ssw0rd!',
                'mY$ecr3t#P@ssw0rd',
                'test!@#$%^&*()_+',
                'àáâãäåæçèéêë'
            ];
            specialPasswords.forEach((password, index)=>{
                const hashedPassword = `salt:special_hashed_${index}`;
                hashRepository.hash.mockReturnValue(hashedPassword);
                const result = useCase.execute(password);
                expect(result).toBe(hashedPassword);
                expect(hashRepository.hash).toHaveBeenCalledWith(password);
            });
        });
        it('should handle passwords with numbers only', ()=>{
            const numericPasswords = [
                '123456',
                '987654321',
                '0000000000',
                '1234567890'
            ];
            numericPasswords.forEach((password, index)=>{
                const hashedPassword = `salt:numeric_hashed_${index}`;
                hashRepository.hash.mockReturnValue(hashedPassword);
                const result = useCase.execute(password);
                expect(result).toBe(hashedPassword);
                expect(hashRepository.hash).toHaveBeenCalledWith(password);
            });
        });
        it('should handle passwords with spaces', ()=>{
            const passwordsWithSpaces = [
                'password with spaces',
                ' leading space',
                'trailing space ',
                '  multiple  spaces  '
            ];
            passwordsWithSpaces.forEach((password, index)=>{
                const hashedPassword = `salt:space_hashed_${index}`;
                hashRepository.hash.mockReturnValue(hashedPassword);
                const result = useCase.execute(password);
                expect(result).toBe(hashedPassword);
                expect(hashRepository.hash).toHaveBeenCalledWith(password);
            });
        });
        it('should handle Unicode characters', ()=>{
            const unicodePasswords = [
                'contraseña123',
                'пароль123',
                '密码123',
                'パスワード123',
                '🔐🔑🛡️'
            ];
            unicodePasswords.forEach((password, index)=>{
                const hashedPassword = `salt:unicode_hashed_${index}`;
                hashRepository.hash.mockReturnValue(hashedPassword);
                const result = useCase.execute(password);
                expect(result).toBe(hashedPassword);
                expect(hashRepository.hash).toHaveBeenCalledWith(password);
            });
        });
        it('should handle same password multiple times', ()=>{
            const password = 'samePassword123';
            const hashedPassword1 = 'salt1:hashed1';
            const hashedPassword2 = 'salt2:hashed2';
            hashRepository.hash.mockReturnValueOnce(hashedPassword1).mockReturnValueOnce(hashedPassword2);
            const result1 = useCase.execute(password);
            const result2 = useCase.execute(password);
            expect(result1).toBe(hashedPassword1);
            expect(result2).toBe(hashedPassword2);
            expect(hashRepository.hash).toHaveBeenCalledTimes(2);
            expect(hashRepository.hash).toHaveBeenNthCalledWith(1, password);
            expect(hashRepository.hash).toHaveBeenNthCalledWith(2, password);
        });
        it('should handle repository errors gracefully', ()=>{
            const password = 'testPassword';
            hashRepository.hash.mockImplementation(()=>{
                throw new Error('Hashing service unavailable');
            });
            expect(()=>useCase.execute(password)).toThrow('Hashing service unavailable');
            expect(hashRepository.hash).toHaveBeenCalledWith(password);
        });
        it('should handle very long passwords', ()=>{
            const veryLongPassword = 'a'.repeat(10000); // 10,000 characters
            const hashedPassword = 'salt:hashedVeryLongPassword';
            hashRepository.hash.mockReturnValue(hashedPassword);
            const result = useCase.execute(veryLongPassword);
            expect(result).toBe(hashedPassword);
            expect(hashRepository.hash).toHaveBeenCalledWith(veryLongPassword);
        });
        it('should handle common password patterns', ()=>{
            const commonPatterns = [
                '123456789',
                'password123',
                'qwerty123',
                'admin123',
                'user123',
                'test123'
            ];
            commonPatterns.forEach((password, index)=>{
                const hashedPassword = `salt:common_hashed_${index}`;
                hashRepository.hash.mockReturnValue(hashedPassword);
                const result = useCase.execute(password);
                expect(result).toBe(hashedPassword);
                expect(hashRepository.hash).toHaveBeenCalledWith(password);
            });
        });
        it('should handle concurrent hashing requests', ()=>{
            const passwords = [
                'password1',
                'password2',
                'password3',
                'password4',
                'password5'
            ];
            const hashedPasswords = passwords.map((_, index)=>`salt${index}:hashed_${index}`);
            hashRepository.hash.mockReturnValueOnce(hashedPasswords[0]).mockReturnValueOnce(hashedPasswords[1]).mockReturnValueOnce(hashedPasswords[2]).mockReturnValueOnce(hashedPasswords[3]).mockReturnValueOnce(hashedPasswords[4]);
            const results = passwords.map((password)=>useCase.execute(password));
            results.forEach((result, index)=>{
                expect(result).toBe(hashedPasswords[index]);
            });
            expect(hashRepository.hash).toHaveBeenCalledTimes(5);
            passwords.forEach((password, index)=>{
                expect(hashRepository.hash).toHaveBeenNthCalledWith(index + 1, password);
            });
        });
        it('should handle edge case characters', ()=>{
            const edgeCasePasswords = [
                '\n',
                '\t',
                '\r',
                '\0',
                '\\',
                '"',
                "'"
            ];
            edgeCasePasswords.forEach((password, index)=>{
                const hashedPassword = `salt:edge_hashed_${index}`;
                hashRepository.hash.mockReturnValue(hashedPassword);
                const result = useCase.execute(password);
                expect(result).toBe(hashedPassword);
                expect(hashRepository.hash).toHaveBeenCalledWith(password);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,