{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/modules/Hash/application/ports/in/hashString.useCase.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HashStringUseCase } from './hashString.useCase';\nimport { HashRepositoryPort } from '../out/hash-repository.port';\nimport { HASH_REPOSITORY } from '../../../constants';\n\ndescribe('HashStringUseCase', () => {\n  let useCase: HashStringUseCase;\n  let hashRepository: jest.Mocked<HashRepositoryPort>;\n\n  beforeEach(async () => {\n    const mockHashRepository = {\n      hash: jest.fn(),\n      compare: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        HashStringUseCase,\n        {\n          provide: HASH_REPOSITORY,\n          useValue: mockHashRepository,\n        },\n      ],\n    }).compile();\n\n    useCase = module.get<HashStringUseCase>(HashStringUseCase);\n    hashRepository = module.get(HASH_REPOSITORY);\n  });\n\n  describe('execute', () => {\n    it('should hash a password successfully', () => {\n      const password = 'mySecretPassword123';\n      const hashedPassword: `${string}:${string}` = 'salt:hashedPassword123';\n\n      hashRepository.hash.mockReturnValue(hashedPassword);\n\n      const result = useCase.execute(password);\n\n      expect(result).toBe(hashedPassword);\n      expect(hashRepository.hash).toHaveBeenCalledWith(password);\n    });\n\n    it('should handle empty password', () => {\n      const password = '';\n      const hashedPassword: `${string}:${string}` = 'salt:hashedEmptyString';\n\n      hashRepository.hash.mockReturnValue(hashedPassword);\n\n      const result = useCase.execute(password);\n\n      expect(result).toBe(hashedPassword);\n      expect(hashRepository.hash).toHaveBeenCalledWith(password);\n    });\n\n    it('should handle different password lengths', () => {\n      const passwords = [\n        'a', // Single character\n        'short', // Short password\n        'mediumLengthPassword123', // Medium password\n        'veryLongPasswordWithManyCharactersAndNumbers123456789', // Long password\n      ];\n\n      passwords.forEach((password, index) => {\n        const hashedPassword: `${string}:${string}` = `salt:hashed_${index}`;\n        hashRepository.hash.mockReturnValue(hashedPassword);\n\n        const result = useCase.execute(password);\n\n        expect(result).toBe(hashedPassword);\n        expect(hashRepository.hash).toHaveBeenCalledWith(password);\n      });\n    });\n\n    it('should handle passwords with special characters', () => {\n      const specialPasswords = [\n        'password@123',\n        'p@ssw0rd!',\n        'mY$ecr3t#P@ssw0rd',\n        'test!@#$%^&*()_+',\n        'àáâãäåæçèéêë',\n      ];\n\n      specialPasswords.forEach((password, index) => {\n        const hashedPassword: `${string}:${string}` = `salt:special_hashed_${index}`;\n        hashRepository.hash.mockReturnValue(hashedPassword);\n\n        const result = useCase.execute(password);\n\n        expect(result).toBe(hashedPassword);\n        expect(hashRepository.hash).toHaveBeenCalledWith(password);\n      });\n    });\n\n    it('should handle passwords with numbers only', () => {\n      const numericPasswords = [\n        '123456',\n        '987654321',\n        '0000000000',\n        '1234567890',\n      ];\n\n      numericPasswords.forEach((password, index) => {\n        const hashedPassword: `${string}:${string}` = `salt:numeric_hashed_${index}`;\n        hashRepository.hash.mockReturnValue(hashedPassword);\n\n        const result = useCase.execute(password);\n\n        expect(result).toBe(hashedPassword);\n        expect(hashRepository.hash).toHaveBeenCalledWith(password);\n      });\n    });\n\n    it('should handle passwords with spaces', () => {\n      const passwordsWithSpaces = [\n        'password with spaces',\n        ' leading space',\n        'trailing space ',\n        '  multiple  spaces  ',\n      ];\n\n      passwordsWithSpaces.forEach((password, index) => {\n        const hashedPassword: `${string}:${string}` = `salt:space_hashed_${index}`;\n        hashRepository.hash.mockReturnValue(hashedPassword);\n\n        const result = useCase.execute(password);\n\n        expect(result).toBe(hashedPassword);\n        expect(hashRepository.hash).toHaveBeenCalledWith(password);\n      });\n    });\n\n    it('should handle Unicode characters', () => {\n      const unicodePasswords = [\n        'contraseña123', // Spanish\n        'пароль123', // Russian\n        '密码123', // Chinese\n        'パスワード123', // Japanese\n        '🔐🔑🛡️', // Emojis\n      ];\n\n      unicodePasswords.forEach((password, index) => {\n        const hashedPassword: `${string}:${string}` = `salt:unicode_hashed_${index}`;\n        hashRepository.hash.mockReturnValue(hashedPassword);\n\n        const result = useCase.execute(password);\n\n        expect(result).toBe(hashedPassword);\n        expect(hashRepository.hash).toHaveBeenCalledWith(password);\n      });\n    });\n\n    it('should handle same password multiple times', () => {\n      const password = 'samePassword123';\n      const hashedPassword1: `${string}:${string}` = 'salt1:hashed1';\n      const hashedPassword2: `${string}:${string}` = 'salt2:hashed2';\n\n      hashRepository.hash\n        .mockReturnValueOnce(hashedPassword1)\n        .mockReturnValueOnce(hashedPassword2);\n\n      const result1 = useCase.execute(password);\n      const result2 = useCase.execute(password);\n\n      expect(result1).toBe(hashedPassword1);\n      expect(result2).toBe(hashedPassword2);\n      expect(hashRepository.hash).toHaveBeenCalledTimes(2);\n      expect(hashRepository.hash).toHaveBeenNthCalledWith(1, password);\n      expect(hashRepository.hash).toHaveBeenNthCalledWith(2, password);\n    });\n\n    it('should handle repository errors gracefully', () => {\n      const password = 'testPassword';\n      hashRepository.hash.mockImplementation(() => {\n        throw new Error('Hashing service unavailable');\n      });\n\n      expect(() => useCase.execute(password)).toThrow(\n        'Hashing service unavailable',\n      );\n      expect(hashRepository.hash).toHaveBeenCalledWith(password);\n    });\n\n    it('should handle very long passwords', () => {\n      const veryLongPassword = 'a'.repeat(10000); // 10,000 characters\n      const hashedPassword: `${string}:${string}` =\n        'salt:hashedVeryLongPassword';\n\n      hashRepository.hash.mockReturnValue(hashedPassword);\n\n      const result = useCase.execute(veryLongPassword);\n\n      expect(result).toBe(hashedPassword);\n      expect(hashRepository.hash).toHaveBeenCalledWith(veryLongPassword);\n    });\n\n    it('should handle common password patterns', () => {\n      const commonPatterns = [\n        '123456789',\n        'password123',\n        'qwerty123',\n        'admin123',\n        'user123',\n        'test123',\n      ];\n\n      commonPatterns.forEach((password, index) => {\n        const hashedPassword: `${string}:${string}` = `salt:common_hashed_${index}`;\n        hashRepository.hash.mockReturnValue(hashedPassword);\n\n        const result = useCase.execute(password);\n\n        expect(result).toBe(hashedPassword);\n        expect(hashRepository.hash).toHaveBeenCalledWith(password);\n      });\n    });\n\n    it('should handle concurrent hashing requests', () => {\n      const passwords = [\n        'password1',\n        'password2',\n        'password3',\n        'password4',\n        'password5',\n      ];\n      const hashedPasswords: `${string}:${string}`[] = passwords.map(\n        (_, index): `${string}:${string}` => `salt${index}:hashed_${index}`,\n      );\n\n      hashRepository.hash\n        .mockReturnValueOnce(hashedPasswords[0])\n        .mockReturnValueOnce(hashedPasswords[1])\n        .mockReturnValueOnce(hashedPasswords[2])\n        .mockReturnValueOnce(hashedPasswords[3])\n        .mockReturnValueOnce(hashedPasswords[4]);\n\n      const results = passwords.map((password) => useCase.execute(password));\n\n      results.forEach((result, index) => {\n        expect(result).toBe(hashedPasswords[index]);\n      });\n\n      expect(hashRepository.hash).toHaveBeenCalledTimes(5);\n      passwords.forEach((password, index) => {\n        expect(hashRepository.hash).toHaveBeenNthCalledWith(\n          index + 1,\n          password,\n        );\n      });\n    });\n\n    it('should handle edge case characters', () => {\n      const edgeCasePasswords = [\n        '\\n', // Newline\n        '\\t', // Tab\n        '\\r', // Carriage return\n        '\\0', // Null character\n        '\\\\', // Backslash\n        '\"', // Quote\n        \"'\", // Single quote\n      ];\n\n      edgeCasePasswords.forEach((password, index) => {\n        const hashedPassword: `${string}:${string}` = `salt:edge_hashed_${index}`;\n        hashRepository.hash.mockReturnValue(hashedPassword);\n\n        const result = useCase.execute(password);\n\n        expect(result).toBe(hashedPassword);\n        expect(hashRepository.hash).toHaveBeenCalledWith(password);\n      });\n    });\n  });\n});\n"],"names":["describe","useCase","hashRepository","beforeEach","mockHashRepository","hash","jest","fn","compare","module","Test","createTestingModule","providers","HashStringUseCase","provide","HASH_REPOSITORY","useValue","compile","get","it","password","hashedPassword","mockReturnValue","result","execute","expect","toBe","toHaveBeenCalledWith","passwords","forEach","index","specialPasswords","numericPasswords","passwordsWithSpaces","unicodePasswords","hashedPassword1","hashedPassword2","mockReturnValueOnce","result1","result2","toHaveBeenCalledTimes","toHaveBeenNthCalledWith","mockImplementation","Error","toThrow","veryLongPassword","repeat","commonPatterns","hashedPasswords","map","_","results","edgeCasePasswords"],"mappings":"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"}