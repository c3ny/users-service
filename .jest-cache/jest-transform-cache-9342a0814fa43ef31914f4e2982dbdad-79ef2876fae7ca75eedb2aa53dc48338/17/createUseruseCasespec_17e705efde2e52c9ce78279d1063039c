95fe3f7904bc4e4ca5be5cc4ec228720
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _testing = require("@nestjs/testing");
const _createUseruseCase = require("./createUser.useCase");
const _getUserByEmailuseCase = require("./getUserByEmail.useCase");
const _constants = require("../../../../constants");
const _errorsenum = require("../../../core/errors/errors.enum");
const _resulttypes = require("../../../types/result.types");
const _testsetup = require("../../../../test-setup");
describe('CreateUserUseCase', ()=>{
    let useCase;
    let userRepository;
    let getUserByEmailUseCase;
    beforeAll(async ()=>{
        const mockUserRepository = (0, _testsetup.createMockRepository)();
        const mockGetUserByEmailUseCase = (0, _testsetup.createMockUseCase)();
        const module = await _testing.Test.createTestingModule({
            providers: [
                _createUseruseCase.CreateUserUseCase,
                {
                    provide: _constants.USERS_REPOSITORY,
                    useValue: mockUserRepository
                },
                {
                    provide: _getUserByEmailuseCase.GetUserByEmailUseCase,
                    useValue: mockGetUserByEmailUseCase
                }
            ]
        }).compile();
        useCase = module.get(_createUseruseCase.CreateUserUseCase);
        userRepository = module.get(_constants.USERS_REPOSITORY);
        getUserByEmailUseCase = module.get(_getUserByEmailuseCase.GetUserByEmailUseCase);
    });
    describe('execute', ()=>{
        const validUserData = {
            email: 'test@example.com',
            password: 'hashedPassword123',
            name: 'John Doe',
            city: 'São Paulo',
            uf: 'SP',
            zipcode: '01234-567',
            personType: 'DONOR'
        };
        it('should create a new user successfully when email does not exist', async ()=>{
            const savedUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                ...validUserData
            };
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFound));
            userRepository.save.mockResolvedValue(savedUser);
            const result = await useCase.execute(validUserData);
            expect(result.isSuccess).toBe(true);
            expect(result.value).toEqual(savedUser);
            expect(getUserByEmailUseCase.execute).toHaveBeenCalledWith(validUserData.email);
            expect(userRepository.save).toHaveBeenCalledWith(validUserData);
        });
        it('should return failure when user with email already exists', async ()=>{
            const existingUser = {
                id: '987e6543-e21b-34d5-a678-426614174111',
                ...validUserData
            };
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(existingUser));
            const result = await useCase.execute(validUserData);
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.UserAlreadyExists);
            expect(getUserByEmailUseCase.execute).toHaveBeenCalledWith(validUserData.email);
            expect(userRepository.save).not.toHaveBeenCalled();
        });
        it('should handle different person types', async ()=>{
            const donorUser = {
                ...validUserData,
                personType: 'DONOR'
            };
            const companyUser = {
                ...validUserData,
                personType: 'COMPANY',
                email: 'company@example.com'
            };
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFound));
            const savedDonor = {
                id: '123',
                ...donorUser
            };
            const savedCompany = {
                id: '456',
                ...companyUser
            };
            userRepository.save.mockResolvedValueOnce(savedDonor).mockResolvedValueOnce(savedCompany);
            const donorResult = await useCase.execute(donorUser);
            const companyResult = await useCase.execute(companyUser);
            expect(donorResult.isSuccess).toBe(true);
            expect(donorResult.value?.personType).toBe('DONOR');
            expect(companyResult.isSuccess).toBe(true);
            expect(companyResult.value?.personType).toBe('COMPANY');
        });
        it('should handle user creation without optional fields', async ()=>{
            const minimalUserData = {
                email: 'minimal@example.com',
                name: 'Minimal User',
                city: 'São Paulo',
                uf: 'SP',
                personType: 'DONOR'
            };
            const savedUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                ...minimalUserData
            };
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFound));
            userRepository.save.mockResolvedValue(savedUser);
            const result = await useCase.execute(minimalUserData);
            expect(result.isSuccess).toBe(true);
            expect(result.value).toEqual(savedUser);
            expect(result.value?.password).toBeUndefined();
            expect(result.value?.zipcode).toBeUndefined();
        });
        it('should handle different data formats', async ()=>{
            const testCases = [
                {
                    uf: 'SP',
                    email: 'test-sp@example.com',
                    zipcode: '01234-567'
                },
                {
                    uf: 'RJ',
                    email: 'user.name@domain.co.uk',
                    zipcode: '01234567'
                }
            ];
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFound));
            for (const testCase of testCases){
                const userData = {
                    ...validUserData,
                    ...testCase
                };
                const savedUser = {
                    id: 'test-id',
                    ...userData
                };
                userRepository.save.mockResolvedValue(savedUser);
                const result = await useCase.execute(userData);
                expect(result.isSuccess).toBe(true);
                expect(result.value?.uf).toBe(testCase.uf);
                expect(result.value?.email).toBe(testCase.email);
            }
        });
        it('should handle repository errors gracefully', async ()=>{
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFound));
            userRepository.save.mockRejectedValue(new Error('Database connection failed'));
            await expect(useCase.execute(validUserData)).rejects.toThrow('Database connection failed');
            expect(getUserByEmailUseCase.execute).toHaveBeenCalledWith(validUserData.email);
        });
        it('should handle getUserByEmailUseCase errors', async ()=>{
            getUserByEmailUseCase.execute.mockRejectedValue(new Error('Email service unavailable'));
            await expect(useCase.execute(validUserData)).rejects.toThrow('Email service unavailable');
            expect(userRepository.save).not.toHaveBeenCalled();
        });
        it('should handle long names and cities', async ()=>{
            const longNameUser = {
                ...validUserData,
                email: 'longname@example.com',
                name: 'João da Silva Santos Oliveira Pereira de Souza',
                city: 'São Bernardo do Campo'
            };
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFound));
            const savedUser = {
                id: '123',
                ...longNameUser
            };
            userRepository.save.mockResolvedValue(savedUser);
            const result = await useCase.execute(longNameUser);
            expect(result.isSuccess).toBe(true);
            expect(result.value?.name).toBe(longNameUser.name);
            expect(result.value?.city).toBe(longNameUser.city);
        });
        it('should handle special characters in names and cities', async ()=>{
            const specialCharUser = {
                ...validUserData,
                email: 'special@example.com',
                name: 'José María Ñuñez',
                city: 'Poços de Caldas'
            };
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFound));
            const savedUser = {
                id: '123',
                ...specialCharUser
            };
            userRepository.save.mockResolvedValue(savedUser);
            const result = await useCase.execute(specialCharUser);
            expect(result.isSuccess).toBe(true);
            expect(result.value?.name).toBe(specialCharUser.name);
            expect(result.value?.city).toBe(specialCharUser.city);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,