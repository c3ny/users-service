{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/ports/in/user/createUser.useCase.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CreateUserUseCase } from './createUser.useCase';\nimport { GetUserByEmailUseCase } from './getUserByEmail.useCase';\nimport { UserRepositoryPort } from '../../out/users-repository.port';\nimport { USERS_REPOSITORY } from '../../../../constants';\nimport { User } from '../../../core/domain/user.entity';\nimport { ErrorsEnum } from '../../../core/errors/errors.enum';\nimport { ResultFactory } from '../../../types/result.types';\nimport {\n  createMockRepository,\n  createMockUseCase,\n} from '../../../../test-setup';\n\ndescribe('CreateUserUseCase', () => {\n  let useCase: CreateUserUseCase;\n  let userRepository: jest.Mocked<UserRepositoryPort>;\n  let getUserByEmailUseCase: jest.Mocked<GetUserByEmailUseCase>;\n\n  beforeAll(async () => {\n    const mockUserRepository = createMockRepository();\n    const mockGetUserByEmailUseCase = createMockUseCase();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CreateUserUseCase,\n        {\n          provide: USERS_REPOSITORY,\n          useValue: mockUserRepository,\n        },\n        {\n          provide: GetUserByEmailUseCase,\n          useValue: mockGetUserByEmailUseCase,\n        },\n      ],\n    }).compile();\n\n    useCase = module.get<CreateUserUseCase>(CreateUserUseCase);\n    userRepository = module.get(USERS_REPOSITORY);\n    getUserByEmailUseCase = module.get(GetUserByEmailUseCase);\n  });\n\n  describe('execute', () => {\n    const validUserData: Omit<User, 'id'> = {\n      email: 'test@example.com',\n      password: 'hashedPassword123',\n      name: 'John Doe',\n      city: 'São Paulo',\n      uf: 'SP',\n      zipcode: '01234-567',\n      personType: 'DONOR',\n    };\n\n    it('should create a new user successfully when email does not exist', async () => {\n      const savedUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        ...validUserData,\n      };\n\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFound),\n      );\n      userRepository.save.mockResolvedValue(savedUser);\n\n      const result = await useCase.execute(validUserData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(savedUser);\n      expect(getUserByEmailUseCase.execute).toHaveBeenCalledWith(\n        validUserData.email,\n      );\n      expect(userRepository.save).toHaveBeenCalledWith(validUserData);\n    });\n\n    it('should return failure when user with email already exists', async () => {\n      const existingUser: User = {\n        id: '987e6543-e21b-34d5-a678-426614174111',\n        ...validUserData,\n      };\n\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.success(existingUser),\n      );\n\n      const result = await useCase.execute(validUserData);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserAlreadyExists);\n      expect(getUserByEmailUseCase.execute).toHaveBeenCalledWith(\n        validUserData.email,\n      );\n      expect(userRepository.save).not.toHaveBeenCalled();\n    });\n\n    it('should handle different person types', async () => {\n      const donorUser: Omit<User, 'id'> = {\n        ...validUserData,\n        personType: 'DONOR',\n      };\n      const companyUser: Omit<User, 'id'> = {\n        ...validUserData,\n        personType: 'COMPANY',\n        email: 'company@example.com',\n      };\n\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFound),\n      );\n\n      const savedDonor: User = { id: '123', ...donorUser };\n      const savedCompany: User = { id: '456', ...companyUser };\n\n      userRepository.save\n        .mockResolvedValueOnce(savedDonor)\n        .mockResolvedValueOnce(savedCompany);\n\n      const donorResult = await useCase.execute(donorUser);\n      const companyResult = await useCase.execute(companyUser);\n\n      expect(donorResult.isSuccess).toBe(true);\n      expect(donorResult.value?.personType).toBe('DONOR');\n      expect(companyResult.isSuccess).toBe(true);\n      expect(companyResult.value?.personType).toBe('COMPANY');\n    });\n\n    it('should handle user creation without optional fields', async () => {\n      const minimalUserData: Omit<User, 'id'> = {\n        email: 'minimal@example.com',\n        name: 'Minimal User',\n        city: 'São Paulo',\n        uf: 'SP',\n        personType: 'DONOR',\n      };\n\n      const savedUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        ...minimalUserData,\n      };\n\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFound),\n      );\n      userRepository.save.mockResolvedValue(savedUser);\n\n      const result = await useCase.execute(minimalUserData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(savedUser);\n      expect(result.value?.password).toBeUndefined();\n      expect(result.value?.zipcode).toBeUndefined();\n    });\n\n    it('should handle different data formats', async () => {\n      const testCases = [\n        { uf: 'SP', email: 'test-sp@example.com', zipcode: '01234-567' },\n        { uf: 'RJ', email: 'user.name@domain.co.uk', zipcode: '01234567' },\n      ];\n\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFound),\n      );\n\n      for (const testCase of testCases) {\n        const userData: Omit<User, 'id'> = { ...validUserData, ...testCase };\n        const savedUser: User = { id: 'test-id', ...userData };\n        userRepository.save.mockResolvedValue(savedUser);\n\n        const result = await useCase.execute(userData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.uf).toBe(testCase.uf);\n        expect(result.value?.email).toBe(testCase.email);\n      }\n    });\n\n    it('should handle repository errors gracefully', async () => {\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFound),\n      );\n      userRepository.save.mockRejectedValue(\n        new Error('Database connection failed'),\n      );\n\n      await expect(useCase.execute(validUserData)).rejects.toThrow(\n        'Database connection failed',\n      );\n      expect(getUserByEmailUseCase.execute).toHaveBeenCalledWith(\n        validUserData.email,\n      );\n    });\n\n    it('should handle getUserByEmailUseCase errors', async () => {\n      getUserByEmailUseCase.execute.mockRejectedValue(\n        new Error('Email service unavailable'),\n      );\n\n      await expect(useCase.execute(validUserData)).rejects.toThrow(\n        'Email service unavailable',\n      );\n      expect(userRepository.save).not.toHaveBeenCalled();\n    });\n\n    it('should handle long names and cities', async () => {\n      const longNameUser: Omit<User, 'id'> = {\n        ...validUserData,\n        email: 'longname@example.com',\n        name: 'João da Silva Santos Oliveira Pereira de Souza',\n        city: 'São Bernardo do Campo',\n      };\n\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFound),\n      );\n\n      const savedUser: User = { id: '123', ...longNameUser };\n      userRepository.save.mockResolvedValue(savedUser);\n\n      const result = await useCase.execute(longNameUser);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.name).toBe(longNameUser.name);\n      expect(result.value?.city).toBe(longNameUser.city);\n    });\n\n    it('should handle special characters in names and cities', async () => {\n      const specialCharUser: Omit<User, 'id'> = {\n        ...validUserData,\n        email: 'special@example.com',\n        name: 'José María Ñuñez',\n        city: 'Poços de Caldas',\n      };\n\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFound),\n      );\n\n      const savedUser: User = { id: '123', ...specialCharUser };\n      userRepository.save.mockResolvedValue(savedUser);\n\n      const result = await useCase.execute(specialCharUser);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.name).toBe(specialCharUser.name);\n      expect(result.value?.city).toBe(specialCharUser.city);\n    });\n  });\n});\n"],"names":["describe","useCase","userRepository","getUserByEmailUseCase","beforeAll","mockUserRepository","createMockRepository","mockGetUserByEmailUseCase","createMockUseCase","module","Test","createTestingModule","providers","CreateUserUseCase","provide","USERS_REPOSITORY","useValue","GetUserByEmailUseCase","compile","get","validUserData","email","password","name","city","uf","zipcode","personType","it","savedUser","id","execute","mockResolvedValue","ResultFactory","failure","ErrorsEnum","UserNotFound","save","result","expect","isSuccess","toBe","value","toEqual","toHaveBeenCalledWith","existingUser","success","error","UserAlreadyExists","not","toHaveBeenCalled","donorUser","companyUser","savedDonor","savedCompany","mockResolvedValueOnce","donorResult","companyResult","minimalUserData","toBeUndefined","testCases","testCase","userData","mockRejectedValue","Error","rejects","toThrow","longNameUser","specialCharUser"],"mappings":";;;;yBAAoC;mCACF;uCACI;2BAEL;4BAEN;6BACG;2BAIvB;AAEPA,SAAS,qBAAqB;IAC5B,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,UAAU;QACR,MAAMC,qBAAqBC,IAAAA,+BAAoB;QAC/C,MAAMC,4BAA4BC,IAAAA,4BAAiB;QAEnD,MAAMC,SAAwB,MAAMC,aAAI,CAACC,mBAAmB,CAAC;YAC3DC,WAAW;gBACTC,oCAAiB;gBACjB;oBACEC,SAASC,2BAAgB;oBACzBC,UAAUX;gBACZ;gBACA;oBACES,SAASG,4CAAqB;oBAC9BD,UAAUT;gBACZ;aACD;QACH,GAAGW,OAAO;QAEVjB,UAAUQ,OAAOU,GAAG,CAAoBN,oCAAiB;QACzDX,iBAAiBO,OAAOU,GAAG,CAACJ,2BAAgB;QAC5CZ,wBAAwBM,OAAOU,GAAG,CAACF,4CAAqB;IAC1D;IAEAjB,SAAS,WAAW;QAClB,MAAMoB,gBAAkC;YACtCC,OAAO;YACPC,UAAU;YACVC,MAAM;YACNC,MAAM;YACNC,IAAI;YACJC,SAAS;YACTC,YAAY;QACd;QAEAC,GAAG,mEAAmE;YACpE,MAAMC,YAAkB;gBACtBC,IAAI;gBACJ,GAAGV,aAAa;YAClB;YAEAjB,sBAAsB4B,OAAO,CAACC,iBAAiB,CAC7CC,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,YAAY;YAE/ClC,eAAemC,IAAI,CAACL,iBAAiB,CAACH;YAEtC,MAAMS,SAAS,MAAMrC,QAAQ8B,OAAO,CAACX;YAErCmB,OAAOD,OAAOE,SAAS,EAAEC,IAAI,CAAC;YAC9BF,OAAOD,OAAOI,KAAK,EAAEC,OAAO,CAACd;YAC7BU,OAAOpC,sBAAsB4B,OAAO,EAAEa,oBAAoB,CACxDxB,cAAcC,KAAK;YAErBkB,OAAOrC,eAAemC,IAAI,EAAEO,oBAAoB,CAACxB;QACnD;QAEAQ,GAAG,6DAA6D;YAC9D,MAAMiB,eAAqB;gBACzBf,IAAI;gBACJ,GAAGV,aAAa;YAClB;YAEAjB,sBAAsB4B,OAAO,CAACC,iBAAiB,CAC7CC,0BAAa,CAACa,OAAO,CAACD;YAGxB,MAAMP,SAAS,MAAMrC,QAAQ8B,OAAO,CAACX;YAErCmB,OAAOD,OAAOE,SAAS,EAAEC,IAAI,CAAC;YAC9BF,OAAOD,OAAOS,KAAK,EAAEN,IAAI,CAACN,sBAAU,CAACa,iBAAiB;YACtDT,OAAOpC,sBAAsB4B,OAAO,EAAEa,oBAAoB,CACxDxB,cAAcC,KAAK;YAErBkB,OAAOrC,eAAemC,IAAI,EAAEY,GAAG,CAACC,gBAAgB;QAClD;QAEAtB,GAAG,wCAAwC;YACzC,MAAMuB,YAA8B;gBAClC,GAAG/B,aAAa;gBAChBO,YAAY;YACd;YACA,MAAMyB,cAAgC;gBACpC,GAAGhC,aAAa;gBAChBO,YAAY;gBACZN,OAAO;YACT;YAEAlB,sBAAsB4B,OAAO,CAACC,iBAAiB,CAC7CC,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,YAAY;YAG/C,MAAMiB,aAAmB;gBAAEvB,IAAI;gBAAO,GAAGqB,SAAS;YAAC;YACnD,MAAMG,eAAqB;gBAAExB,IAAI;gBAAO,GAAGsB,WAAW;YAAC;YAEvDlD,eAAemC,IAAI,CAChBkB,qBAAqB,CAACF,YACtBE,qBAAqB,CAACD;YAEzB,MAAME,cAAc,MAAMvD,QAAQ8B,OAAO,CAACoB;YAC1C,MAAMM,gBAAgB,MAAMxD,QAAQ8B,OAAO,CAACqB;YAE5Cb,OAAOiB,YAAYhB,SAAS,EAAEC,IAAI,CAAC;YACnCF,OAAOiB,YAAYd,KAAK,EAAEf,YAAYc,IAAI,CAAC;YAC3CF,OAAOkB,cAAcjB,SAAS,EAAEC,IAAI,CAAC;YACrCF,OAAOkB,cAAcf,KAAK,EAAEf,YAAYc,IAAI,CAAC;QAC/C;QAEAb,GAAG,uDAAuD;YACxD,MAAM8B,kBAAoC;gBACxCrC,OAAO;gBACPE,MAAM;gBACNC,MAAM;gBACNC,IAAI;gBACJE,YAAY;YACd;YAEA,MAAME,YAAkB;gBACtBC,IAAI;gBACJ,GAAG4B,eAAe;YACpB;YAEAvD,sBAAsB4B,OAAO,CAACC,iBAAiB,CAC7CC,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,YAAY;YAE/ClC,eAAemC,IAAI,CAACL,iBAAiB,CAACH;YAEtC,MAAMS,SAAS,MAAMrC,QAAQ8B,OAAO,CAAC2B;YAErCnB,OAAOD,OAAOE,SAAS,EAAEC,IAAI,CAAC;YAC9BF,OAAOD,OAAOI,KAAK,EAAEC,OAAO,CAACd;YAC7BU,OAAOD,OAAOI,KAAK,EAAEpB,UAAUqC,aAAa;YAC5CpB,OAAOD,OAAOI,KAAK,EAAEhB,SAASiC,aAAa;QAC7C;QAEA/B,GAAG,wCAAwC;YACzC,MAAMgC,YAAY;gBAChB;oBAAEnC,IAAI;oBAAMJ,OAAO;oBAAuBK,SAAS;gBAAY;gBAC/D;oBAAED,IAAI;oBAAMJ,OAAO;oBAA0BK,SAAS;gBAAW;aAClE;YAEDvB,sBAAsB4B,OAAO,CAACC,iBAAiB,CAC7CC,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,YAAY;YAG/C,KAAK,MAAMyB,YAAYD,UAAW;gBAChC,MAAME,WAA6B;oBAAE,GAAG1C,aAAa;oBAAE,GAAGyC,QAAQ;gBAAC;gBACnE,MAAMhC,YAAkB;oBAAEC,IAAI;oBAAW,GAAGgC,QAAQ;gBAAC;gBACrD5D,eAAemC,IAAI,CAACL,iBAAiB,CAACH;gBAEtC,MAAMS,SAAS,MAAMrC,QAAQ8B,OAAO,CAAC+B;gBAErCvB,OAAOD,OAAOE,SAAS,EAAEC,IAAI,CAAC;gBAC9BF,OAAOD,OAAOI,KAAK,EAAEjB,IAAIgB,IAAI,CAACoB,SAASpC,EAAE;gBACzCc,OAAOD,OAAOI,KAAK,EAAErB,OAAOoB,IAAI,CAACoB,SAASxC,KAAK;YACjD;QACF;QAEAO,GAAG,8CAA8C;YAC/CzB,sBAAsB4B,OAAO,CAACC,iBAAiB,CAC7CC,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,YAAY;YAE/ClC,eAAemC,IAAI,CAAC0B,iBAAiB,CACnC,IAAIC,MAAM;YAGZ,MAAMzB,OAAOtC,QAAQ8B,OAAO,CAACX,gBAAgB6C,OAAO,CAACC,OAAO,CAC1D;YAEF3B,OAAOpC,sBAAsB4B,OAAO,EAAEa,oBAAoB,CACxDxB,cAAcC,KAAK;QAEvB;QAEAO,GAAG,8CAA8C;YAC/CzB,sBAAsB4B,OAAO,CAACgC,iBAAiB,CAC7C,IAAIC,MAAM;YAGZ,MAAMzB,OAAOtC,QAAQ8B,OAAO,CAACX,gBAAgB6C,OAAO,CAACC,OAAO,CAC1D;YAEF3B,OAAOrC,eAAemC,IAAI,EAAEY,GAAG,CAACC,gBAAgB;QAClD;QAEAtB,GAAG,uCAAuC;YACxC,MAAMuC,eAAiC;gBACrC,GAAG/C,aAAa;gBAChBC,OAAO;gBACPE,MAAM;gBACNC,MAAM;YACR;YAEArB,sBAAsB4B,OAAO,CAACC,iBAAiB,CAC7CC,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,YAAY;YAG/C,MAAMP,YAAkB;gBAAEC,IAAI;gBAAO,GAAGqC,YAAY;YAAC;YACrDjE,eAAemC,IAAI,CAACL,iBAAiB,CAACH;YAEtC,MAAMS,SAAS,MAAMrC,QAAQ8B,OAAO,CAACoC;YAErC5B,OAAOD,OAAOE,SAAS,EAAEC,IAAI,CAAC;YAC9BF,OAAOD,OAAOI,KAAK,EAAEnB,MAAMkB,IAAI,CAAC0B,aAAa5C,IAAI;YACjDgB,OAAOD,OAAOI,KAAK,EAAElB,MAAMiB,IAAI,CAAC0B,aAAa3C,IAAI;QACnD;QAEAI,GAAG,wDAAwD;YACzD,MAAMwC,kBAAoC;gBACxC,GAAGhD,aAAa;gBAChBC,OAAO;gBACPE,MAAM;gBACNC,MAAM;YACR;YAEArB,sBAAsB4B,OAAO,CAACC,iBAAiB,CAC7CC,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,YAAY;YAG/C,MAAMP,YAAkB;gBAAEC,IAAI;gBAAO,GAAGsC,eAAe;YAAC;YACxDlE,eAAemC,IAAI,CAACL,iBAAiB,CAACH;YAEtC,MAAMS,SAAS,MAAMrC,QAAQ8B,OAAO,CAACqC;YAErC7B,OAAOD,OAAOE,SAAS,EAAEC,IAAI,CAAC;YAC9BF,OAAOD,OAAOI,KAAK,EAAEnB,MAAMkB,IAAI,CAAC2B,gBAAgB7C,IAAI;YACpDgB,OAAOD,OAAOI,KAAK,EAAElB,MAAMiB,IAAI,CAAC2B,gBAAgB5C,IAAI;QACtD;IACF;AACF"}