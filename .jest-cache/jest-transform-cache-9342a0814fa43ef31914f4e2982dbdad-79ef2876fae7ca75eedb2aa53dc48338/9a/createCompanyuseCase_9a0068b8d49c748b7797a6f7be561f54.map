{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/ports/in/company/createCompany.useCase.ts"],"sourcesContent":["import { CompanyRepositoryPort } from '../../out/company-repository.port';\nimport { UseCase } from '@/application/types/useCase.types';\nimport { Company } from '@/application/core/domain/company.entity';\nimport { Result, ResultFactory } from '@/application/types/result.types';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { COMPANY_REPOSITORY } from '@/constants';\nimport { ErrorsEnum } from '@/application/core/errors/errors.enum';\n\n@Injectable()\nexport class CreateCompanyUseCase\n  implements UseCase<Company, Promise<Result<Company>>>\n{\n  constructor(\n    @Inject(COMPANY_REPOSITORY)\n    private readonly companyRepository: CompanyRepositoryPort,\n  ) {}\n\n  async execute(company: Omit<Company, 'id'>): Promise<Result<Company>> {\n    const savedCompany = await this.companyRepository.save(company);\n\n    if (!savedCompany) {\n      return ResultFactory.failure(ErrorsEnum.CompanyNotFoundError);\n    }\n\n    return ResultFactory.success(savedCompany);\n  }\n}\n"],"names":["CreateCompanyUseCase","execute","company","savedCompany","companyRepository","save","ResultFactory","failure","ErrorsEnum","CompanyNotFoundError","success"],"mappings":";;;;+BASaA;;;eAAAA;;;uCATyB;6BAGA;wBACH;2BACA;4BACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGpB,IAAA,AAAMA,uBAAN,MAAMA;IAQX,MAAMC,QAAQC,OAA4B,EAA4B;QACpE,MAAMC,eAAe,MAAM,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAACH;QAEvD,IAAI,CAACC,cAAc;YACjB,OAAOG,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,oBAAoB;QAC9D;QAEA,OAAOH,0BAAa,CAACI,OAAO,CAACP;IAC/B;IAbA,YACE,AACiBC,iBAAwC,CACzD;;aADiBA,oBAAAA;IAChB;AAWL"}