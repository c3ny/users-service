{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/ports/in/user/getUserByEmail.useCase.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { GetUserByEmailUseCase } from './getUserByEmail.useCase';\nimport { UserRepositoryPort } from '../../out/users-repository.port';\nimport { USERS_REPOSITORY } from '../../../../constants';\nimport { User } from '../../../core/domain/user.entity';\nimport { ErrorsEnum } from '../../../core/errors/errors.enum';\n\ndescribe('GetUserByEmailUseCase', () => {\n  let useCase: GetUserByEmailUseCase;\n  let userRepository: jest.Mocked<UserRepositoryPort>;\n\n  beforeEach(async () => {\n    const mockUserRepository = {\n      save: jest.fn(),\n      findById: jest.fn(),\n      findByEmail: jest.fn(),\n      update: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        GetUserByEmailUseCase,\n        {\n          provide: USERS_REPOSITORY,\n          useValue: mockUserRepository,\n        },\n      ],\n    }).compile();\n\n    useCase = module.get<GetUserByEmailUseCase>(GetUserByEmailUseCase);\n    userRepository = module.get(USERS_REPOSITORY);\n  });\n\n  describe('execute', () => {\n    const mockUser: User = {\n      id: '123e4567-e89b-12d3-a456-426614174000',\n      email: 'test@example.com',\n      password: 'hashedPassword123',\n      name: 'John Doe',\n      city: 'São Paulo',\n      uf: 'SP',\n      zipcode: '01234-567',\n      personType: 'DONOR',\n    };\n\n    it('should return user successfully when user with email exists', async () => {\n      userRepository.findByEmail.mockResolvedValue(mockUser);\n\n      const result = await useCase.execute(mockUser.email);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(mockUser);\n      expect(userRepository.findByEmail).toHaveBeenCalledWith(mockUser.email);\n    });\n\n    it('should return failure when user with email does not exist', async () => {\n      const nonExistentEmail = 'nonexistent@example.com';\n      userRepository.findByEmail.mockResolvedValue(null);\n\n      const result = await useCase.execute(nonExistentEmail);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFound);\n      expect(userRepository.findByEmail).toHaveBeenCalledWith(nonExistentEmail);\n    });\n\n    it('should handle different email formats', async () => {\n      const emailFormats = [\n        'user@domain.com',\n        'user.name@domain.co.uk',\n        'user+tag@example.org',\n        'user123@test-domain.com',\n        'firstname.lastname@company.com.br',\n      ];\n\n      for (const email of emailFormats) {\n        const userWithEmail: User = { ...mockUser, email };\n        userRepository.findByEmail.mockResolvedValue(userWithEmail);\n\n        const result = await useCase.execute(email);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.email).toBe(email);\n        expect(userRepository.findByEmail).toHaveBeenCalledWith(email);\n      }\n    });\n\n    it('should handle case sensitivity in email search', async () => {\n      const originalEmail = 'Test@Example.Com';\n      const userWithEmail: User = { ...mockUser, email: originalEmail };\n\n      userRepository.findByEmail.mockResolvedValue(userWithEmail);\n\n      const result = await useCase.execute(originalEmail);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.email).toBe(originalEmail);\n      expect(userRepository.findByEmail).toHaveBeenCalledWith(originalEmail);\n    });\n\n    it('should handle different user types by email', async () => {\n      const donorUser: User = {\n        ...mockUser,\n        personType: 'DONOR',\n        email: 'donor@example.com',\n      };\n      const companyUser: User = {\n        ...mockUser,\n        id: '456e7890-f12c-45e6-b789-426614174222',\n        personType: 'COMPANY',\n        email: 'company@example.com',\n      };\n\n      userRepository.findByEmail\n        .mockResolvedValueOnce(donorUser)\n        .mockResolvedValueOnce(companyUser);\n\n      const donorResult = await useCase.execute(donorUser.email);\n      const companyResult = await useCase.execute(companyUser.email);\n\n      expect(donorResult.isSuccess).toBe(true);\n      expect(donorResult.value?.personType).toBe('DONOR');\n      expect(companyResult.isSuccess).toBe(true);\n      expect(companyResult.value?.personType).toBe('COMPANY');\n    });\n\n    it('should handle users with minimal data found by email', async () => {\n      const minimalUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'minimal@example.com',\n        name: 'Minimal User',\n        city: 'São Paulo',\n        uf: 'SP',\n        personType: 'DONOR',\n      };\n\n      userRepository.findByEmail.mockResolvedValue(minimalUser);\n\n      const result = await useCase.execute(minimalUser.email);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(minimalUser);\n      expect(result.value?.password).toBeUndefined();\n      expect(result.value?.zipcode).toBeUndefined();\n    });\n\n    it('should handle Brazilian domain emails', async () => {\n      const brazilianEmails = [\n        'user@gmail.com.br',\n        'contact@empresa.com.br',\n        'admin@hospital.org.br',\n        'donor@sangue.gov.br',\n      ];\n\n      for (const email of brazilianEmails) {\n        const userWithBrEmail: User = {\n          ...mockUser,\n          id: `user-${email.replace(/[@.]/g, '-')}`,\n          email,\n        };\n\n        userRepository.findByEmail.mockResolvedValue(userWithBrEmail);\n\n        const result = await useCase.execute(email);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.email).toBe(email);\n      }\n    });\n\n    it('should handle repository errors gracefully', async () => {\n      const email = 'test@example.com';\n      userRepository.findByEmail.mockRejectedValue(\n        new Error('Database connection failed'),\n      );\n\n      await expect(useCase.execute(email)).rejects.toThrow(\n        'Database connection failed',\n      );\n      expect(userRepository.findByEmail).toHaveBeenCalledWith(email);\n    });\n\n    it('should handle empty string email', async () => {\n      userRepository.findByEmail.mockResolvedValue(null);\n\n      const result = await useCase.execute('');\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFound);\n      expect(userRepository.findByEmail).toHaveBeenCalledWith('');\n    });\n\n    it('should handle null return from repository', async () => {\n      const email = 'test@example.com';\n      userRepository.findByEmail.mockResolvedValue(null);\n\n      const result = await useCase.execute(email);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFound);\n    });\n\n    it('should handle undefined return from repository', async () => {\n      const email = 'test@example.com';\n      userRepository.findByEmail.mockResolvedValue(undefined as any);\n\n      const result = await useCase.execute(email);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFound);\n    });\n\n    it('should handle emails with special characters', async () => {\n      const specialEmails = [\n        'user+test@example.com',\n        'user.test@example.com',\n        'user_test@example.com',\n        'user-test@example.com',\n      ];\n\n      for (const email of specialEmails) {\n        const userWithSpecialEmail: User = {\n          ...mockUser,\n          id: `user-${email.replace(/[@.+_-]/g, '')}`,\n          email,\n        };\n\n        userRepository.findByEmail.mockResolvedValue(userWithSpecialEmail);\n\n        const result = await useCase.execute(email);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.email).toBe(email);\n      }\n    });\n\n    it('should handle long email addresses', async () => {\n      const longEmail =\n        'very.long.email.address.with.many.dots@very-long-domain-name.example.com';\n      const userWithLongEmail: User = { ...mockUser, email: longEmail };\n\n      userRepository.findByEmail.mockResolvedValue(userWithLongEmail);\n\n      const result = await useCase.execute(longEmail);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.email).toBe(longEmail);\n    });\n\n    it('should handle concurrent requests for the same email', async () => {\n      userRepository.findByEmail.mockResolvedValue(mockUser);\n\n      const promises = Array(5)\n        .fill(null)\n        .map(() => useCase.execute(mockUser.email));\n      const results = await Promise.all(promises);\n\n      results.forEach((result) => {\n        expect(result.isSuccess).toBe(true);\n        expect(result.value).toEqual(mockUser);\n      });\n\n      expect(userRepository.findByEmail).toHaveBeenCalledTimes(5);\n    });\n\n    it('should handle emails with numbers', async () => {\n      const emailsWithNumbers = [\n        'user123@example.com',\n        'test2024@domain.com',\n        '123user@test.com',\n        'user.2024@example.org',\n      ];\n\n      for (const email of emailsWithNumbers) {\n        const userWithNumberEmail: User = {\n          ...mockUser,\n          id: `user-${email.replace(/[@.]/g, '-')}`,\n          email,\n        };\n\n        userRepository.findByEmail.mockResolvedValue(userWithNumberEmail);\n\n        const result = await useCase.execute(email);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.email).toBe(email);\n      }\n    });\n\n    it('should handle users from different states found by email', async () => {\n      const states = ['SP', 'RJ', 'MG', 'RS', 'PR', 'SC', 'BA', 'GO'];\n\n      for (const uf of states) {\n        const email = `user-${uf.toLowerCase()}@example.com`;\n        const userFromState: User = {\n          ...mockUser,\n          id: `user-${uf}`,\n          email,\n          uf,\n          city: `Cidade ${uf}`,\n        };\n\n        userRepository.findByEmail.mockResolvedValue(userFromState);\n\n        const result = await useCase.execute(email);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.uf).toBe(uf);\n        expect(result.value?.email).toBe(email);\n      }\n    });\n\n    it('should handle authentication scenarios', async () => {\n      // Simulate authentication flow where we need to find user by email\n      const authUser: User = {\n        ...mockUser,\n        email: 'auth@example.com',\n        password: 'hashedPassword123',\n      };\n\n      userRepository.findByEmail.mockResolvedValue(authUser);\n\n      const result = await useCase.execute(authUser.email);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.password).toBeDefined();\n      expect(result.value?.email).toBe(authUser.email);\n    });\n  });\n});\n"],"names":["describe","useCase","userRepository","beforeEach","mockUserRepository","save","jest","fn","findById","findByEmail","update","module","Test","createTestingModule","providers","GetUserByEmailUseCase","provide","USERS_REPOSITORY","useValue","compile","get","mockUser","id","email","password","name","city","uf","zipcode","personType","it","mockResolvedValue","result","execute","expect","isSuccess","toBe","value","toEqual","toHaveBeenCalledWith","nonExistentEmail","error","ErrorsEnum","UserNotFound","emailFormats","userWithEmail","originalEmail","donorUser","companyUser","mockResolvedValueOnce","donorResult","companyResult","minimalUser","toBeUndefined","brazilianEmails","userWithBrEmail","replace","mockRejectedValue","Error","rejects","toThrow","undefined","specialEmails","userWithSpecialEmail","longEmail","userWithLongEmail","promises","Array","fill","map","results","Promise","all","forEach","toHaveBeenCalledTimes","emailsWithNumbers","userWithNumberEmail","states","toLowerCase","userFromState","authUser","toBeDefined"],"mappings":"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"}