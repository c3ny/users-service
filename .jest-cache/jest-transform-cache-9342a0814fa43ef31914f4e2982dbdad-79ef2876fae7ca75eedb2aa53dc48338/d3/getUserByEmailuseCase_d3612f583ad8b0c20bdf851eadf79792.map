{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/ports/in/user/getUserByEmail.useCase.ts"],"sourcesContent":["import { Result, ResultFactory } from '@/application/types/result.types';\nimport { UseCase } from '@/application/types/useCase.types';\nimport { User } from '@/application/core/domain/user.entity';\nimport { UserRepositoryPort } from '../../out/users-repository.port';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { USERS_REPOSITORY } from '@/constants';\nimport { ErrorsEnum } from '@/application/core/errors/errors.enum';\n\n@Injectable()\nexport class GetUserByEmailUseCase\n  implements UseCase<string, Promise<Result<User>>>\n{\n  constructor(\n    @Inject(USERS_REPOSITORY)\n    private readonly usersRepository: UserRepositoryPort,\n  ) {}\n\n  async execute(email: string): Promise<Result<User>> {\n    const user = await this.usersRepository.findByEmail(email);\n\n    if (!user) {\n      return ResultFactory.failure(ErrorsEnum.UserNotFound);\n    }\n\n    return ResultFactory.success(user);\n  }\n}\n"],"names":["GetUserByEmailUseCase","execute","email","user","usersRepository","findByEmail","ResultFactory","failure","ErrorsEnum","UserNotFound","success"],"mappings":";;;;+BASaA;;;eAAAA;;;6BATyB;qCAGH;wBACA;2BACF;4BACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGpB,IAAA,AAAMA,wBAAN,MAAMA;IAQX,MAAMC,QAAQC,KAAa,EAAyB;QAClD,MAAMC,OAAO,MAAM,IAAI,CAACC,eAAe,CAACC,WAAW,CAACH;QAEpD,IAAI,CAACC,MAAM;YACT,OAAOG,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,YAAY;QACtD;QAEA,OAAOH,0BAAa,CAACI,OAAO,CAACP;IAC/B;IAbA,YACE,AACiBC,eAAmC,CACpD;;aADiBA,kBAAAA;IAChB;AAWL"}