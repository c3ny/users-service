{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/modules/Hash/application/core/service/hash.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HashService } from './hash.service';\nimport { HashStringUseCase } from '../../ports/in/hashString.useCase';\nimport { CompareHashUseCase } from '../../ports/in/compareHash.useCase';\nimport { createMockUseCase } from '../../../../test-setup';\n\ndescribe('HashService', () => {\n  let service: HashService;\n  let hashStringUseCase: jest.Mocked<HashStringUseCase>;\n  let compareHashUseCase: jest.Mocked<CompareHashUseCase>;\n\n  beforeAll(async () => {\n    const mockHashStringUseCase = createMockUseCase();\n    const mockCompareHashUseCase = createMockUseCase();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        HashService,\n        { provide: HashStringUseCase, useValue: mockHashStringUseCase },\n        { provide: CompareHashUseCase, useValue: mockCompareHashUseCase },\n      ],\n    }).compile();\n\n    service = module.get<HashService>(HashService);\n    hashStringUseCase = module.get(HashStringUseCase);\n    compareHashUseCase = module.get(CompareHashUseCase);\n  });\n\n  describe('hash', () => {\n    it('should hash a password successfully', () => {\n      const password = 'mySecretPassword123';\n      const hashedPassword = 'hashedPassword123';\n\n      hashStringUseCase.execute.mockReturnValue(hashedPassword);\n\n      const result = service.hash(password);\n\n      expect(result).toBe(hashedPassword);\n      expect(hashStringUseCase.execute).toHaveBeenCalledWith(password);\n    });\n\n    it('should handle empty password', () => {\n      const password = '';\n      const hashedPassword = 'hashedEmptyString';\n\n      hashStringUseCase.execute.mockReturnValue(hashedPassword);\n\n      const result = service.hash(password);\n\n      expect(result).toBe(hashedPassword);\n      expect(hashStringUseCase.execute).toHaveBeenCalledWith(password);\n    });\n\n    it('should handle different password types', () => {\n      const testCases = [\n        { password: 'Complex@Password123!', expected: 'hashedComplex' },\n        { password: 'àáâãäåæçèéêë', expected: 'hashedUnicode' },\n        { password: 'a'.repeat(100), expected: 'hashedLong' },\n      ];\n\n      testCases.forEach(({ password, expected }) => {\n        hashStringUseCase.execute.mockReturnValue(expected);\n        const result = service.hash(password);\n        expect(result).toBe(expected);\n      });\n    });\n\n    it('should handle use case errors', () => {\n      const password = 'testPassword';\n      hashStringUseCase.execute.mockImplementation(() => {\n        throw new Error('Hashing failed');\n      });\n\n      expect(() => service.hash(password)).toThrow('Hashing failed');\n      expect(hashStringUseCase.execute).toHaveBeenCalledWith(password);\n    });\n\n    it('should handle null return from use case', () => {\n      const password = 'testPassword';\n      hashStringUseCase.execute.mockReturnValue(null as any);\n\n      const result = service.hash(password);\n\n      expect(result).toBeNull();\n      expect(hashStringUseCase.execute).toHaveBeenCalledWith(password);\n    });\n\n    it('should handle undefined return from use case', () => {\n      const password = 'testPassword';\n      hashStringUseCase.execute.mockReturnValue(undefined as any);\n\n      const result = service.hash(password);\n\n      expect(result).toBeUndefined();\n      expect(hashStringUseCase.execute).toHaveBeenCalledWith(password);\n    });\n  });\n\n  describe('compare', () => {\n    it('should compare password with hash successfully when they match', () => {\n      const password = 'mySecretPassword123';\n      const passwordWithHash: `${string}:${string}` = 'salt:hashedPassword123';\n\n      compareHashUseCase.execute.mockReturnValue(true);\n\n      const result = service.compare(password, passwordWithHash);\n\n      expect(result).toBe(true);\n      expect(compareHashUseCase.execute).toHaveBeenCalledWith({\n        password,\n        hash: passwordWithHash,\n      });\n    });\n\n    it('should compare password with hash successfully when they do not match', () => {\n      const password = 'wrongPassword';\n      const passwordWithHash: `${string}:${string}` = 'salt:hashedPassword123';\n\n      compareHashUseCase.execute.mockReturnValue(false);\n\n      const result = service.compare(password, passwordWithHash);\n\n      expect(result).toBe(false);\n      expect(compareHashUseCase.execute).toHaveBeenCalledWith({\n        password,\n        hash: passwordWithHash,\n      });\n    });\n\n    it('should handle empty password comparison', () => {\n      const password = '';\n      const passwordWithHash: `${string}:${string}` = 'salt:hashedPassword123';\n\n      compareHashUseCase.execute.mockReturnValue(false);\n\n      const result = service.compare(password, passwordWithHash);\n\n      expect(result).toBe(false);\n      expect(compareHashUseCase.execute).toHaveBeenCalledWith({\n        password,\n        hash: passwordWithHash,\n      });\n    });\n\n    it('should handle different password and hash formats', () => {\n      const testCases = [\n        { password: 'simple', hash: 'salt:hash' as const, expected: true },\n        {\n          password: 'Complex@123!',\n          hash: 'longsalt:longhash' as const,\n          expected: false,\n        },\n        {\n          password: '🔐🔑',\n          hash: 'special@salt:special#hash' as const,\n          expected: true,\n        },\n      ];\n\n      testCases.forEach(({ password, hash, expected }) => {\n        compareHashUseCase.execute.mockReturnValue(expected);\n        const result = service.compare(password, hash);\n        expect(result).toBe(expected);\n      });\n    });\n\n    it('should handle use case errors in comparison', () => {\n      const password = 'testPassword';\n      const passwordWithHash: `${string}:${string}` = 'salt:hash';\n\n      compareHashUseCase.execute.mockImplementation(() => {\n        throw new Error('Comparison failed');\n      });\n\n      expect(() => service.compare(password, passwordWithHash)).toThrow(\n        'Comparison failed',\n      );\n      expect(compareHashUseCase.execute).toHaveBeenCalledWith({\n        password,\n        hash: passwordWithHash,\n      });\n    });\n\n  });\n\n  describe('integration scenarios', () => {\n    it('should handle hash and compare workflow', () => {\n      const originalPassword = 'mySecretPassword123';\n      const hashedPassword = 'salt:hashedPassword123';\n      const passwordWithHash: `${string}:${string}` = hashedPassword as `${string}:${string}`;\n\n      hashStringUseCase.execute.mockReturnValue(hashedPassword);\n      compareHashUseCase.execute.mockReturnValue(true);\n\n      const hashResult = service.hash(originalPassword);\n      const compareResult = service.compare(originalPassword, passwordWithHash);\n\n      expect(hashResult).toBe(hashedPassword);\n      expect(compareResult).toBe(true);\n    });\n  });\n});\n"],"names":["describe","service","hashStringUseCase","compareHashUseCase","beforeAll","mockHashStringUseCase","createMockUseCase","mockCompareHashUseCase","module","Test","createTestingModule","providers","HashService","provide","HashStringUseCase","useValue","CompareHashUseCase","compile","get","it","password","hashedPassword","execute","mockReturnValue","result","hash","expect","toBe","toHaveBeenCalledWith","testCases","expected","repeat","forEach","mockImplementation","Error","toThrow","toBeNull","undefined","toBeUndefined","passwordWithHash","compare","originalPassword","hashResult","compareResult"],"mappings":"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"}