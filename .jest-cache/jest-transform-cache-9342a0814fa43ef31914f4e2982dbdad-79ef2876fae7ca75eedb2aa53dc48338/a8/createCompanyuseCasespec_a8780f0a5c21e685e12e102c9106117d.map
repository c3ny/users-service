{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/ports/in/company/createCompany.useCase.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CreateCompanyUseCase } from './createCompany.useCase';\nimport { CompanyRepositoryPort } from '../../out/company-repository.port';\nimport { COMPANY_REPOSITORY } from '../../../../constants';\nimport { Company } from '../../../core/domain/company.entity';\nimport { ErrorsEnum } from '../../../core/errors/errors.enum';\n\ndescribe('CreateCompanyUseCase', () => {\n  let useCase: CreateCompanyUseCase;\n  let companyRepository: jest.Mocked<CompanyRepositoryPort>;\n\n  beforeEach(async () => {\n    const mockCompanyRepository = {\n      save: jest.fn(),\n      findById: jest.fn(),\n      findByUserId: jest.fn(),\n      update: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CreateCompanyUseCase,\n        {\n          provide: COMPANY_REPOSITORY,\n          useValue: mockCompanyRepository,\n        },\n      ],\n    }).compile();\n\n    useCase = module.get<CreateCompanyUseCase>(CreateCompanyUseCase);\n    companyRepository = module.get(COMPANY_REPOSITORY);\n  });\n\n  describe('execute', () => {\n    const validCompanyData: Omit<Company, 'id'> = {\n      cnpj: '12.345.678/0001-90',\n      institutionName: 'Hospital São Lucas',\n      cnes: '1234567',\n      fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n    };\n\n    it('should create a new company successfully', async () => {\n      const savedCompany: Company = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        ...validCompanyData,\n      };\n\n      companyRepository.save.mockResolvedValue(savedCompany);\n\n      const result = await useCase.execute(validCompanyData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(savedCompany);\n      expect(companyRepository.save).toHaveBeenCalledWith(validCompanyData);\n    });\n\n    it('should return failure when repository returns null', async () => {\n      companyRepository.save.mockResolvedValue(null as any);\n\n      const result = await useCase.execute(validCompanyData);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.CompanyNotFoundError);\n      expect(companyRepository.save).toHaveBeenCalledWith(validCompanyData);\n    });\n\n    it('should handle different CNPJ formats', async () => {\n      const cnpjFormats = [\n        '12.345.678/0001-90',\n        '12345678000190',\n        '98.765.432/0001-11',\n        '98765432000111',\n      ];\n\n      for (const cnpj of cnpjFormats) {\n        const companyData: Omit<Company, 'id'> = { ...validCompanyData, cnpj };\n        const savedCompany: Company = {\n          id: `company-${cnpj.replace(/\\D/g, '')}`,\n          ...companyData,\n        };\n\n        companyRepository.save.mockResolvedValue(savedCompany);\n\n        const result = await useCase.execute(companyData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.cnpj).toBe(cnpj);\n      }\n    });\n\n    it('should handle different types of medical institutions', async () => {\n      const institutions = [\n        { name: 'Hospital Geral da Cidade', cnes: '1111111' },\n        { name: 'Clínica de Especialidades Médicas', cnes: '2222222' },\n        { name: 'Banco de Sangue Central', cnes: '3333333' },\n        { name: 'Centro de Hematologia e Hemoterapia', cnes: '4444444' },\n        { name: 'Fundação Pró-Sangue Hemocentro', cnes: '5555555' },\n      ];\n\n      for (const institution of institutions) {\n        const companyData: Omit<Company, 'id'> = {\n          ...validCompanyData,\n          institutionName: institution.name,\n          cnes: institution.cnes,\n          fkUserId: `user-${institution.cnes}`,\n        };\n\n        const savedCompany: Company = {\n          id: `company-${institution.cnes}`,\n          ...companyData,\n        };\n        companyRepository.save.mockResolvedValue(savedCompany);\n\n        const result = await useCase.execute(companyData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.institutionName).toBe(institution.name);\n        expect(result.value?.cnes).toBe(institution.cnes);\n      }\n    });\n\n    it('should handle different CNES codes', async () => {\n      const cnesCodes = [\n        '1234567',\n        '7654321',\n        '0000001',\n        '9999999',\n        '1111111',\n        '2222222',\n      ];\n\n      for (const cnes of cnesCodes) {\n        const companyData: Omit<Company, 'id'> = { ...validCompanyData, cnes };\n        const savedCompany: Company = { id: `company-${cnes}`, ...companyData };\n\n        companyRepository.save.mockResolvedValue(savedCompany);\n\n        const result = await useCase.execute(companyData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.cnes).toBe(cnes);\n      }\n    });\n\n    it('should handle different user IDs', async () => {\n      const userIds = [\n        '123e4567-e89b-12d3-a456-426614174000',\n        '987e6543-e21b-34d5-a678-426614174111',\n        '456f7890-f12c-45e6-b789-426614174222',\n        '789a0123-a34b-56c7-d890-426614174333',\n      ];\n\n      for (const fkUserId of userIds) {\n        const companyData: Omit<Company, 'id'> = {\n          ...validCompanyData,\n          fkUserId,\n        };\n        const savedCompany: Company = {\n          id: `company-${fkUserId.slice(0, 8)}`,\n          ...companyData,\n        };\n\n        companyRepository.save.mockResolvedValue(savedCompany);\n\n        const result = await useCase.execute(companyData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.fkUserId).toBe(fkUserId);\n      }\n    });\n\n    it('should handle hospital companies', async () => {\n      const hospitalData: Omit<Company, 'id'> = {\n        ...validCompanyData,\n        institutionName: 'Hospital das Clínicas - FMUSP',\n        cnpj: '11.222.333/0001-44',\n        cnes: '1122334',\n      };\n\n      const savedHospital: Company = {\n        id: 'hospital-company',\n        ...hospitalData,\n      };\n      companyRepository.save.mockResolvedValue(savedHospital);\n\n      const result = await useCase.execute(hospitalData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.institutionName).toContain('Hospital');\n    });\n\n    it('should handle blood bank companies', async () => {\n      const bloodBankData: Omit<Company, 'id'> = {\n        ...validCompanyData,\n        institutionName: 'Banco de Sangue do Estado',\n        cnpj: '22.333.444/0001-55',\n        cnes: '2233445',\n      };\n\n      const savedBloodBank: Company = {\n        id: 'bloodbank-company',\n        ...bloodBankData,\n      };\n      companyRepository.save.mockResolvedValue(savedBloodBank);\n\n      const result = await useCase.execute(bloodBankData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.institutionName).toContain('Banco de Sangue');\n    });\n\n    it('should handle clinic companies', async () => {\n      const clinicData: Omit<Company, 'id'> = {\n        ...validCompanyData,\n        institutionName: 'Clínica Médica Especializada',\n        cnpj: '33.444.555/0001-66',\n        cnes: '3344556',\n      };\n\n      const savedClinic: Company = { id: 'clinic-company', ...clinicData };\n      companyRepository.save.mockResolvedValue(savedClinic);\n\n      const result = await useCase.execute(clinicData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.institutionName).toContain('Clínica');\n    });\n\n    it('should handle repository errors gracefully', async () => {\n      companyRepository.save.mockRejectedValue(\n        new Error('Database connection failed'),\n      );\n\n      await expect(useCase.execute(validCompanyData)).rejects.toThrow(\n        'Database connection failed',\n      );\n      expect(companyRepository.save).toHaveBeenCalledWith(validCompanyData);\n    });\n\n    it('should handle edge case CNPJ values', async () => {\n      const edgeCaseCnpjs = [\n        '00.000.000/0001-91',\n        '11.111.111/1111-11',\n        '99.999.999/9999-99',\n      ];\n\n      for (const cnpj of edgeCaseCnpjs) {\n        const companyData: Omit<Company, 'id'> = { ...validCompanyData, cnpj };\n        const savedCompany: Company = {\n          id: `edge-${cnpj.replace(/\\D/g, '')}`,\n          ...companyData,\n        };\n\n        companyRepository.save.mockResolvedValue(savedCompany);\n\n        const result = await useCase.execute(companyData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.cnpj).toBe(cnpj);\n      }\n    });\n\n    it('should handle institution names with special characters', async () => {\n      const specialNames = [\n        'Hospital São José & Cia',\n        'Clínica Médica - Unidade I',\n        'Centro de Saúde (Filial)',\n        'Fundação Pró-Vida',\n        \"Instituto D'Or\",\n      ];\n\n      for (const institutionName of specialNames) {\n        const companyData: Omit<Company, 'id'> = {\n          ...validCompanyData,\n          institutionName,\n          fkUserId: `user-${institutionName.length}`,\n        };\n\n        const savedCompany: Company = {\n          id: `special-${institutionName.length}`,\n          ...companyData,\n        };\n        companyRepository.save.mockResolvedValue(savedCompany);\n\n        const result = await useCase.execute(companyData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.institutionName).toBe(institutionName);\n      }\n    });\n\n    it('should handle long institution names', async () => {\n      const longName =\n        'Fundação Centro de Hematologia e Hemoterapia de Minas Gerais - Hemominas - Unidade Regional de Juiz de Fora';\n      const companyData: Omit<Company, 'id'> = {\n        ...validCompanyData,\n        institutionName: longName,\n      };\n\n      const savedCompany: Company = { id: 'long-name-company', ...companyData };\n      companyRepository.save.mockResolvedValue(savedCompany);\n\n      const result = await useCase.execute(companyData);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.institutionName).toBe(longName);\n    });\n\n    it('should handle concurrent company creation', async () => {\n      const companyDataList = Array(5)\n        .fill(null)\n        .map((_, index) => ({\n          ...validCompanyData,\n          cnpj: `12.345.678/000${index}-90`,\n          cnes: `123456${index}`,\n          fkUserId: `user-${index}`,\n        }));\n\n      const savedCompanies = companyDataList.map((data, index) => ({\n        id: `company-${index}`,\n        ...data,\n      }));\n\n      companyRepository.save\n        .mockResolvedValueOnce(savedCompanies[0])\n        .mockResolvedValueOnce(savedCompanies[1])\n        .mockResolvedValueOnce(savedCompanies[2])\n        .mockResolvedValueOnce(savedCompanies[3])\n        .mockResolvedValueOnce(savedCompanies[4]);\n\n      const promises = companyDataList.map((data) => useCase.execute(data));\n      const results = await Promise.all(promises);\n\n      results.forEach((result, index) => {\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.cnpj).toBe(companyDataList[index].cnpj);\n      });\n\n      expect(companyRepository.save).toHaveBeenCalledTimes(5);\n    });\n\n    it('should handle undefined return from repository', async () => {\n      companyRepository.save.mockResolvedValue(undefined as any);\n\n      const result = await useCase.execute(validCompanyData);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.CompanyNotFoundError);\n    });\n\n    it('should handle CNES edge cases', async () => {\n      const edgeCases = ['0000000', '1111111', '9999999'];\n\n      for (const cnes of edgeCases) {\n        const companyData: Omit<Company, 'id'> = { ...validCompanyData, cnes };\n        const savedCompany: Company = {\n          id: `edge-cnes-${cnes}`,\n          ...companyData,\n        };\n\n        companyRepository.save.mockResolvedValue(savedCompany);\n\n        const result = await useCase.execute(companyData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.cnes).toBe(cnes);\n        expect(result.value?.cnes).toHaveLength(7);\n      }\n    });\n\n    it('should handle different types of healthcare facilities', async () => {\n      const facilityTypes = [\n        { type: 'Hospital Público', name: 'Hospital Municipal de Emergência' },\n        { type: 'Hospital Privado', name: 'Hospital Sírio-Libanês' },\n        { type: 'UBS', name: 'Unidade Básica de Saúde Central' },\n        { type: 'Laboratório', name: 'Laboratório de Análises Clínicas' },\n        { type: 'Hemocentro', name: 'Hemocentro Regional' },\n      ];\n\n      for (const facility of facilityTypes) {\n        const companyData: Omit<Company, 'id'> = {\n          ...validCompanyData,\n          institutionName: facility.name,\n          cnes: `${facility.type.length}${Math.floor(Math.random() * 1000000)}`.padStart(\n            7,\n            '0',\n          ),\n          fkUserId: `user-${facility.type.replace(/\\s/g, '-').toLowerCase()}`,\n        };\n\n        const savedCompany: Company = {\n          id: `${facility.type.toLowerCase()}-company`,\n          ...companyData,\n        };\n        companyRepository.save.mockResolvedValue(savedCompany);\n\n        const result = await useCase.execute(companyData);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.institutionName).toBe(facility.name);\n      }\n    });\n  });\n});\n"],"names":["describe","useCase","companyRepository","beforeEach","mockCompanyRepository","save","jest","fn","findById","findByUserId","update","module","Test","createTestingModule","providers","CreateCompanyUseCase","provide","COMPANY_REPOSITORY","useValue","compile","get","validCompanyData","cnpj","institutionName","cnes","fkUserId","it","savedCompany","id","mockResolvedValue","result","execute","expect","isSuccess","toBe","value","toEqual","toHaveBeenCalledWith","error","ErrorsEnum","CompanyNotFoundError","cnpjFormats","companyData","replace","institutions","name","institution","cnesCodes","userIds","slice","hospitalData","savedHospital","toContain","bloodBankData","savedBloodBank","clinicData","savedClinic","mockRejectedValue","Error","rejects","toThrow","edgeCaseCnpjs","specialNames","length","longName","companyDataList","Array","fill","map","_","index","savedCompanies","data","mockResolvedValueOnce","promises","results","Promise","all","forEach","toHaveBeenCalledTimes","undefined","edgeCases","toHaveLength","facilityTypes","type","facility","Math","floor","random","padStart","toLowerCase"],"mappings":"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"}