{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/core/domain/donor.entity.spec.ts"],"sourcesContent":["import { Donor } from './donor.entity';\n\ndescribe('Donor Entity', () => {\n  describe('Donor creation', () => {\n    it('should create a donor with all required properties', () => {\n      const donorData = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        cpf: '123.456.789-00',\n        bloodType: 'O+',\n        birthDate: new Date('1990-05-15'),\n        fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n      };\n\n      const donor = new Donor();\n      Object.assign(donor, donorData);\n\n      expect(donor.id).toBe(donorData.id);\n      expect(donor.cpf).toBe(donorData.cpf);\n      expect(donor.bloodType).toBe(donorData.bloodType);\n      expect(donor.birthDate).toBe(donorData.birthDate);\n      expect(donor.fkUserId).toBe(donorData.fkUserId);\n    });\n\n    it('should handle CPF with different formats', () => {\n      const cpfFormats = ['123.456.789-00', '12345678900', '123 456 789 00'];\n\n      cpfFormats.forEach((cpf) => {\n        const donor = new Donor();\n        donor.cpf = cpf;\n        expect(donor.cpf).toBe(cpf);\n      });\n    });\n\n    it('should handle all blood types', () => {\n      const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\n\n      bloodTypes.forEach((bloodType) => {\n        const donor = new Donor();\n        donor.bloodType = bloodType;\n        expect(donor.bloodType).toBe(bloodType);\n      });\n    });\n\n    it('should handle different birth dates', () => {\n      const birthDates = [\n        new Date('1980-01-01'),\n        new Date('1995-12-31'),\n        new Date('2000-06-15'),\n        new Date('1975-03-20'),\n      ];\n\n      birthDates.forEach((birthDate) => {\n        const donor = new Donor();\n        donor.birthDate = birthDate;\n        expect(donor.birthDate).toBe(birthDate);\n      });\n    });\n\n    it('should handle foreign key relationships', () => {\n      const userIds = [\n        '123e4567-e89b-12d3-a456-426614174000',\n        '987e6543-e21b-34d5-a678-426614174111',\n        '456f7890-f12c-45e6-b789-426614174222',\n      ];\n\n      userIds.forEach((userId) => {\n        const donor = new Donor();\n        donor.fkUserId = userId;\n        expect(donor.fkUserId).toBe(userId);\n      });\n    });\n  });\n\n  describe('Blood type validation', () => {\n    it('should handle positive blood types', () => {\n      const positiveTypes = ['A+', 'B+', 'AB+', 'O+'];\n\n      positiveTypes.forEach((bloodType) => {\n        const donor = new Donor();\n        donor.bloodType = bloodType;\n        expect(donor.bloodType).toContain('+');\n        expect(donor.bloodType).toBe(bloodType);\n      });\n    });\n\n    it('should handle negative blood types', () => {\n      const negativeTypes = ['A-', 'B-', 'AB-', 'O-'];\n\n      negativeTypes.forEach((bloodType) => {\n        const donor = new Donor();\n        donor.bloodType = bloodType;\n        expect(donor.bloodType).toContain('-');\n        expect(donor.bloodType).toBe(bloodType);\n      });\n    });\n\n    it('should handle universal donor', () => {\n      const donor = new Donor();\n      donor.bloodType = 'O-';\n\n      expect(donor.bloodType).toBe('O-');\n    });\n\n    it('should handle universal recipient', () => {\n      const donor = new Donor();\n      donor.bloodType = 'AB+';\n\n      expect(donor.bloodType).toBe('AB+');\n    });\n  });\n\n  describe('Age calculation scenarios', () => {\n    it('should handle donors of legal age', () => {\n      const legalAge = new Date();\n      legalAge.setFullYear(legalAge.getFullYear() - 18); // 18 years ago\n\n      const donor = new Donor();\n      donor.birthDate = legalAge;\n\n      expect(donor.birthDate).toBe(legalAge);\n    });\n\n    it('should handle senior donors', () => {\n      const seniorAge = new Date();\n      seniorAge.setFullYear(seniorAge.getFullYear() - 65); // 65 years ago\n\n      const donor = new Donor();\n      donor.birthDate = seniorAge;\n\n      expect(donor.birthDate).toBe(seniorAge);\n    });\n\n    it('should handle middle-aged donors', () => {\n      const middleAge = new Date();\n      middleAge.setFullYear(middleAge.getFullYear() - 35); // 35 years ago\n\n      const donor = new Donor();\n      donor.birthDate = middleAge;\n\n      expect(donor.birthDate).toBe(middleAge);\n    });\n  });\n\n  describe('Donor business rules', () => {\n    it('should maintain referential integrity with user', () => {\n      const userId = '123e4567-e89b-12d3-a456-426614174000';\n      const donor = new Donor();\n      donor.fkUserId = userId;\n\n      expect(donor.fkUserId).toBe(userId);\n      expect(donor.fkUserId).toMatch(\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i,\n      );\n    });\n\n    it('should handle CPF validation format', () => {\n      const validCpfs = ['123.456.789-00', '987.654.321-11', '111.222.333-44'];\n\n      validCpfs.forEach((cpf) => {\n        const donor = new Donor();\n        donor.cpf = cpf;\n        expect(donor.cpf).toMatch(/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/);\n      });\n    });\n\n    it('should handle birth date edge cases', () => {\n      const today = new Date();\n      const eighteenYearsAgo = new Date(\n        today.getFullYear() - 18,\n        today.getMonth(),\n        today.getDate(),\n      );\n      const sixtyYearsAgo = new Date(\n        today.getFullYear() - 60,\n        today.getMonth(),\n        today.getDate(),\n      );\n\n      const youngDonor = new Donor();\n      youngDonor.birthDate = eighteenYearsAgo;\n\n      const olderDonor = new Donor();\n      olderDonor.birthDate = sixtyYearsAgo;\n\n      expect(youngDonor.birthDate).toBe(eighteenYearsAgo);\n      expect(olderDonor.birthDate).toBe(sixtyYearsAgo);\n    });\n\n    it('should handle different blood type combinations for compatibility', () => {\n      const compatibilityTests = [\n        {\n          donor: 'O-',\n          canDonateTo: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],\n        },\n        { donor: 'O+', canDonateTo: ['A+', 'B+', 'AB+', 'O+'] },\n        { donor: 'A-', canDonateTo: ['A+', 'A-', 'AB+', 'AB-'] },\n        { donor: 'AB+', canDonateTo: ['AB+'] },\n      ];\n\n      compatibilityTests.forEach((test) => {\n        const donor = new Donor();\n        donor.bloodType = test.donor;\n        expect(donor.bloodType).toBe(test.donor);\n        // Note: Compatibility logic would be in a service, not the entity\n      });\n    });\n  });\n});\n"],"names":["describe","it","donorData","id","cpf","bloodType","birthDate","Date","fkUserId","donor","Donor","Object","assign","expect","toBe","cpfFormats","forEach","bloodTypes","birthDates","userIds","userId","positiveTypes","toContain","negativeTypes","legalAge","setFullYear","getFullYear","seniorAge","middleAge","toMatch","validCpfs","today","eighteenYearsAgo","getMonth","getDate","sixtyYearsAgo","youngDonor","olderDonor","compatibilityTests","canDonateTo","test"],"mappings":"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"}