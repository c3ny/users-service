{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/core/service/users.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { UsersService } from './users.service';\nimport { GetUserUseCase } from '../../ports/in/user/getUser.useCase';\nimport { CreateUserUseCase } from '../../ports/in/user/createUser.useCase';\nimport { HashStringUseCase } from '../../../modules/Hash/application/ports/in/hashString.useCase';\nimport { CompareHashUseCase } from '../../../modules/Hash/application/ports/in/compareHash.useCase';\nimport { GetUserByEmailUseCase } from '../../ports/in/user/getUserByEmail.useCase';\nimport { ChangePasswordUseCase } from '../../ports/in/user/changePassword.useCase';\nimport { CreateDonorUseCase } from '../../ports/in/donor/createDonor.useCase';\nimport { CreateCompanyUseCase } from '../../ports/in/company/createCompany.useCase';\nimport { User } from '../domain/user.entity';\nimport { CreateUserRequest, PersonType } from '../../types/user.types';\nimport { ResultFactory } from '../../types/result.types';\nimport { ErrorsEnum } from '../errors/errors.enum';\nimport { createMockUseCase } from '../../../test-setup';\n\ndescribe('UsersService', () => {\n  let service: UsersService;\n  let getUserUseCase: jest.Mocked<GetUserUseCase>;\n  let createUserUseCase: jest.Mocked<CreateUserUseCase>;\n  let hashStringUseCase: jest.Mocked<HashStringUseCase>;\n  let compareHashUseCase: jest.Mocked<CompareHashUseCase>;\n  let getUserByEmailUseCase: jest.Mocked<GetUserByEmailUseCase>;\n  let changePasswordUseCase: jest.Mocked<ChangePasswordUseCase>;\n  let createDonorUseCase: jest.Mocked<CreateDonorUseCase>;\n  let createCompanyUseCase: jest.Mocked<CreateCompanyUseCase>;\n\n  beforeAll(async () => {\n    const mockGetUserUseCase = createMockUseCase();\n    const mockCreateUserUseCase = createMockUseCase();\n    const mockHashStringUseCase = createMockUseCase();\n    const mockCompareHashUseCase = createMockUseCase();\n    const mockGetUserByEmailUseCase = createMockUseCase();\n    const mockChangePasswordUseCase = createMockUseCase();\n    const mockCreateDonorUseCase = createMockUseCase();\n    const mockCreateCompanyUseCase = createMockUseCase();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UsersService,\n        { provide: GetUserUseCase, useValue: mockGetUserUseCase },\n        { provide: CreateUserUseCase, useValue: mockCreateUserUseCase },\n        { provide: HashStringUseCase, useValue: mockHashStringUseCase },\n        { provide: CompareHashUseCase, useValue: mockCompareHashUseCase },\n        { provide: GetUserByEmailUseCase, useValue: mockGetUserByEmailUseCase },\n        { provide: ChangePasswordUseCase, useValue: mockChangePasswordUseCase },\n        { provide: CreateDonorUseCase, useValue: mockCreateDonorUseCase },\n        { provide: CreateCompanyUseCase, useValue: mockCreateCompanyUseCase },\n      ],\n    }).compile();\n\n    service = module.get<UsersService>(UsersService);\n    getUserUseCase = module.get(GetUserUseCase);\n    createUserUseCase = module.get(CreateUserUseCase);\n    hashStringUseCase = module.get(HashStringUseCase);\n    compareHashUseCase = module.get(CompareHashUseCase);\n    getUserByEmailUseCase = module.get(GetUserByEmailUseCase);\n    changePasswordUseCase = module.get(ChangePasswordUseCase);\n    createDonorUseCase = module.get(CreateDonorUseCase);\n    createCompanyUseCase = module.get(CreateCompanyUseCase);\n  });\n\n  describe('getUserById', () => {\n    const mockUser: User = {\n      id: '123e4567-e89b-12d3-a456-426614174000',\n      email: 'test@example.com',\n      password: 'hashedPassword123',\n      name: 'John Doe',\n      city: 'S達o Paulo',\n      uf: 'SP',\n      zipcode: '01234-567',\n      personType: 'DONOR',\n    };\n\n    it('should return user without password when user exists', async () => {\n      getUserUseCase.execute.mockResolvedValue(ResultFactory.success(mockUser));\n\n      const result = await service.getUserById(mockUser.id);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.password).toBeUndefined();\n      expect(result.value?.id).toBe(mockUser.id);\n      expect(result.value?.email).toBe(mockUser.email);\n      expect(getUserUseCase.execute).toHaveBeenCalledWith(mockUser.id);\n    });\n\n    it('should return failure when user does not exist', async () => {\n      getUserUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFoundError),\n      );\n\n      const result = await service.getUserById('nonexistent-id');\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFoundError);\n    });\n\n    it('should handle different user types', async () => {\n      const donorUser = { ...mockUser, personType: 'DONOR' };\n      getUserUseCase.execute.mockResolvedValue(\n        ResultFactory.success(donorUser),\n      );\n\n      const result = await service.getUserById('donor-id');\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.personType).toBe('DONOR');\n    });\n  });\n\n  describe('createUser', () => {\n    const donorRequest: CreateUserRequest = {\n      email: 'donor@example.com',\n      password: 'plainPassword123',\n      name: 'John Donor',\n      city: 'S達o Paulo',\n      uf: 'SP',\n      zipcode: '01234-567',\n      personType: PersonType.DONOR,\n      cpf: '123.456.789-00',\n      bloodType: 'O+',\n      birthDate: new Date('1990-05-15'),\n    };\n\n    const companyRequest: CreateUserRequest = {\n      email: 'company@example.com',\n      password: 'plainPassword123',\n      name: 'Hospital Company',\n      city: 'S達o Paulo',\n      uf: 'SP',\n      zipcode: '01234-567',\n      personType: PersonType.COMPANY,\n      cnpj: '12.345.678/0001-90',\n      institutionName: 'Hospital S達o Lucas',\n      cnes: '1234567',\n    };\n\n    it('should create donor user successfully', async () => {\n      const hashedPassword = 'hashedPassword123';\n      const createdUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: donorRequest.email,\n        password: hashedPassword,\n        name: donorRequest.name,\n        city: donorRequest.city,\n        uf: donorRequest.uf,\n        zipcode: donorRequest.zipcode,\n        personType: donorRequest.personType,\n      };\n\n      hashStringUseCase.execute.mockReturnValue(hashedPassword);\n      createUserUseCase.execute.mockResolvedValue(\n        ResultFactory.success(createdUser),\n      );\n      createDonorUseCase.execute.mockResolvedValue(\n        ResultFactory.success({\n          id: 'donor-id',\n          cpf: donorRequest.cpf,\n          bloodType: donorRequest.bloodType,\n          birthDate: donorRequest.birthDate,\n          fkUserId: createdUser.id,\n        }),\n      );\n\n      const result = await service.createUser(donorRequest);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(createdUser);\n      expect(hashStringUseCase.execute).toHaveBeenCalledWith(\n        'plainPassword123',\n      );\n      expect(createUserUseCase.execute).toHaveBeenCalledWith({\n        ...donorRequest,\n        password: hashedPassword,\n      });\n      expect(createDonorUseCase.execute).toHaveBeenCalledWith({\n        cpf: donorRequest.cpf,\n        bloodType: donorRequest.bloodType,\n        birthDate: donorRequest.birthDate,\n        fkUserId: createdUser.id,\n      });\n    });\n\n    it('should create company user successfully', async () => {\n      const hashedPassword = 'hashedPassword123';\n      const createdUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: companyRequest.email,\n        password: hashedPassword,\n        name: companyRequest.name,\n        city: companyRequest.city,\n        uf: companyRequest.uf,\n        zipcode: companyRequest.zipcode,\n        personType: companyRequest.personType,\n      };\n\n      hashStringUseCase.execute.mockReturnValue(hashedPassword);\n      createUserUseCase.execute.mockResolvedValue(\n        ResultFactory.success(createdUser),\n      );\n      createCompanyUseCase.execute.mockResolvedValue(\n        ResultFactory.success({\n          id: 'company-id',\n          cnpj: companyRequest.cnpj,\n          institutionName: companyRequest.institutionName,\n          cnes: companyRequest.cnes,\n          fkUserId: createdUser.id,\n        }),\n      );\n\n      const result = await service.createUser(companyRequest);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(createdUser);\n      expect(createCompanyUseCase.execute).toHaveBeenCalledWith({\n        cnpj: companyRequest.cnpj,\n        institutionName: companyRequest.institutionName,\n        cnes: companyRequest.cnes,\n        fkUserId: createdUser.id,\n      });\n    });\n\n    it('should return partial success when user is created but donor creation fails', async () => {\n      const hashedPassword = 'hashedPassword123';\n      const createdUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: donorRequest.email,\n        password: hashedPassword,\n        name: donorRequest.name,\n        city: donorRequest.city,\n        uf: donorRequest.uf,\n        zipcode: donorRequest.zipcode,\n        personType: donorRequest.personType,\n      };\n\n      hashStringUseCase.execute.mockReturnValue(hashedPassword);\n      createUserUseCase.execute.mockResolvedValue(\n        ResultFactory.success(createdUser),\n      );\n      createDonorUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.DonorAlreadyExists),\n      );\n\n      const result = await service.createUser(donorRequest);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.isPartialSuccess).toBe(true);\n      expect(result.value).toEqual(createdUser);\n    });\n\n    it('should return failure when user creation fails', async () => {\n      const hashedPassword = 'hashedPassword123';\n\n      hashStringUseCase.execute.mockReturnValue(hashedPassword);\n      createUserUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserAlreadyExists),\n      );\n\n      const result = await service.createUser(donorRequest);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserAlreadyExists);\n      expect(createDonorUseCase.execute).not.toHaveBeenCalled();\n    });\n\n    it('should return failure when personType is missing', async () => {\n      const invalidRequest = { ...donorRequest, personType: undefined as any };\n      const hashedPassword = 'hashedPassword123';\n      const createdUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: invalidRequest.email,\n        password: hashedPassword,\n        name: invalidRequest.name,\n        city: invalidRequest.city,\n        uf: invalidRequest.uf,\n        zipcode: invalidRequest.zipcode,\n        personType: invalidRequest.personType,\n      };\n\n      hashStringUseCase.execute.mockReturnValue(hashedPassword);\n      createUserUseCase.execute.mockResolvedValue(\n        ResultFactory.success(createdUser),\n      );\n\n      const result = await service.createUser(invalidRequest);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFoundError);\n    });\n  });\n\n  describe('authenticate', () => {\n    const authRequest = {\n      email: 'test@example.com',\n      password: 'plainPassword123',\n    };\n\n    const mockUser: User = {\n      id: '123e4567-e89b-12d3-a456-426614174000',\n      email: authRequest.email,\n      password: 'hashedPassword123',\n      name: 'John Doe',\n      city: 'S達o Paulo',\n      uf: 'SP',\n      personType: 'DONOR',\n    };\n\n    it('should authenticate user successfully with correct credentials', async () => {\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.success(mockUser),\n      );\n      compareHashUseCase.execute.mockReturnValue(true);\n\n      const result = await service.authenticate(authRequest);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.password).toBeUndefined();\n      expect(result.value?.email).toBe(authRequest.email);\n      expect(getUserByEmailUseCase.execute).toHaveBeenCalledWith(\n        authRequest.email,\n      );\n      expect(compareHashUseCase.execute).toHaveBeenCalledWith({\n        password: authRequest.password,\n        hash: 'hashedPassword123',\n      });\n    });\n\n    it('should return failure when user is not found', async () => {\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFound),\n      );\n\n      const result = await service.authenticate(authRequest);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFound);\n      expect(compareHashUseCase.execute).not.toHaveBeenCalled();\n    });\n\n    it('should return failure when password is incorrect', async () => {\n      getUserByEmailUseCase.execute.mockResolvedValue(\n        ResultFactory.success(mockUser),\n      );\n      compareHashUseCase.execute.mockReturnValue(false);\n\n      const result = await service.authenticate(authRequest);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.InvalidPassword);\n    });\n  });\n\n  describe('changePassword', () => {\n    const userId = '123e4567-e89b-12d3-a456-426614174000';\n    const passwords = { old: 'oldPassword123', new: 'newPassword456' };\n\n    const mockUser: User = {\n      id: userId,\n      email: 'test@example.com',\n      password: 'hashedOldPassword',\n      name: 'John Doe',\n      city: 'S達o Paulo',\n      uf: 'SP',\n      personType: 'DONOR',\n    };\n\n    it('should change password successfully with correct old password', async () => {\n      const hashedNewPassword = 'hashedNewPassword456';\n      const updatedUser = { ...mockUser, password: hashedNewPassword };\n\n      getUserUseCase.execute.mockResolvedValue(ResultFactory.success(mockUser));\n      compareHashUseCase.execute.mockReturnValue(true);\n      hashStringUseCase.execute.mockReturnValue(hashedNewPassword);\n      changePasswordUseCase.execute.mockResolvedValue(\n        ResultFactory.success(updatedUser),\n      );\n\n      const result = await service.changePassword(userId, passwords);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(updatedUser);\n      expect(getUserUseCase.execute).toHaveBeenCalledWith(userId);\n      expect(compareHashUseCase.execute).toHaveBeenCalledWith({\n        password: passwords.old,\n        hash: mockUser.password,\n      });\n      expect(hashStringUseCase.execute).toHaveBeenCalledWith(passwords.new);\n      expect(changePasswordUseCase.execute).toHaveBeenCalledWith({\n        id: userId,\n        newPassword: hashedNewPassword,\n      });\n    });\n\n    it('should return failure when user is not found', async () => {\n      getUserUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFoundError),\n      );\n\n      const result = await service.changePassword(userId, passwords);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFoundError);\n      expect(compareHashUseCase.execute).not.toHaveBeenCalled();\n    });\n\n    it('should return failure when old password is incorrect', async () => {\n      getUserUseCase.execute.mockResolvedValue(ResultFactory.success(mockUser));\n      compareHashUseCase.execute.mockReturnValue(false);\n\n      const result = await service.changePassword(userId, passwords);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.InvalidPassword);\n      expect(hashStringUseCase.execute).not.toHaveBeenCalled();\n      expect(changePasswordUseCase.execute).not.toHaveBeenCalled();\n    });\n\n    it('should return failure when password change operation fails', async () => {\n      const hashedNewPassword = 'hashedNewPassword456';\n\n      getUserUseCase.execute.mockResolvedValue(ResultFactory.success(mockUser));\n      compareHashUseCase.execute.mockReturnValue(true);\n      hashStringUseCase.execute.mockReturnValue(hashedNewPassword);\n      changePasswordUseCase.execute.mockResolvedValue(\n        ResultFactory.failure(ErrorsEnum.UserNotFoundError),\n      );\n\n      const result = await service.changePassword(userId, passwords);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFoundError);\n    });\n  });\n});\n"],"names":["describe","service","getUserUseCase","createUserUseCase","hashStringUseCase","compareHashUseCase","getUserByEmailUseCase","changePasswordUseCase","createDonorUseCase","createCompanyUseCase","beforeAll","mockGetUserUseCase","createMockUseCase","mockCreateUserUseCase","mockHashStringUseCase","mockCompareHashUseCase","mockGetUserByEmailUseCase","mockChangePasswordUseCase","mockCreateDonorUseCase","mockCreateCompanyUseCase","module","Test","createTestingModule","providers","UsersService","provide","GetUserUseCase","useValue","CreateUserUseCase","HashStringUseCase","CompareHashUseCase","GetUserByEmailUseCase","ChangePasswordUseCase","CreateDonorUseCase","CreateCompanyUseCase","compile","get","mockUser","id","email","password","name","city","uf","zipcode","personType","it","execute","mockResolvedValue","ResultFactory","success","result","getUserById","expect","isSuccess","toBe","value","toBeUndefined","toHaveBeenCalledWith","failure","ErrorsEnum","UserNotFoundError","error","donorUser","donorRequest","PersonType","DONOR","cpf","bloodType","birthDate","Date","companyRequest","COMPANY","cnpj","institutionName","cnes","hashedPassword","createdUser","mockReturnValue","fkUserId","createUser","toEqual","DonorAlreadyExists","isPartialSuccess","UserAlreadyExists","not","toHaveBeenCalled","invalidRequest","undefined","authRequest","authenticate","hash","UserNotFound","InvalidPassword","userId","passwords","old","new","hashedNewPassword","updatedUser","changePassword","newPassword"],"mappings":"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"}