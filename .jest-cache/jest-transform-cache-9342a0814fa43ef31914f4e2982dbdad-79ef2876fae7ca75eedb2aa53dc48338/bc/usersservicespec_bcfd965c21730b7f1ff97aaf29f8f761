cb0ec439bbdf7d01ca910f759688357f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _testing = require("@nestjs/testing");
const _usersservice = require("./users.service");
const _getUseruseCase = require("../../ports/in/user/getUser.useCase");
const _createUseruseCase = require("../../ports/in/user/createUser.useCase");
const _hashStringuseCase = require("../../../modules/Hash/application/ports/in/hashString.useCase");
const _compareHashuseCase = require("../../../modules/Hash/application/ports/in/compareHash.useCase");
const _getUserByEmailuseCase = require("../../ports/in/user/getUserByEmail.useCase");
const _changePassworduseCase = require("../../ports/in/user/changePassword.useCase");
const _createDonoruseCase = require("../../ports/in/donor/createDonor.useCase");
const _createCompanyuseCase = require("../../ports/in/company/createCompany.useCase");
const _usertypes = require("../../types/user.types");
const _resulttypes = require("../../types/result.types");
const _errorsenum = require("../errors/errors.enum");
const _testsetup = require("../../../test-setup");
describe('UsersService', ()=>{
    let service;
    let getUserUseCase;
    let createUserUseCase;
    let hashStringUseCase;
    let compareHashUseCase;
    let getUserByEmailUseCase;
    let changePasswordUseCase;
    let createDonorUseCase;
    let createCompanyUseCase;
    beforeAll(async ()=>{
        const mockGetUserUseCase = (0, _testsetup.createMockUseCase)();
        const mockCreateUserUseCase = (0, _testsetup.createMockUseCase)();
        const mockHashStringUseCase = (0, _testsetup.createMockUseCase)();
        const mockCompareHashUseCase = (0, _testsetup.createMockUseCase)();
        const mockGetUserByEmailUseCase = (0, _testsetup.createMockUseCase)();
        const mockChangePasswordUseCase = (0, _testsetup.createMockUseCase)();
        const mockCreateDonorUseCase = (0, _testsetup.createMockUseCase)();
        const mockCreateCompanyUseCase = (0, _testsetup.createMockUseCase)();
        const module = await _testing.Test.createTestingModule({
            providers: [
                _usersservice.UsersService,
                {
                    provide: _getUseruseCase.GetUserUseCase,
                    useValue: mockGetUserUseCase
                },
                {
                    provide: _createUseruseCase.CreateUserUseCase,
                    useValue: mockCreateUserUseCase
                },
                {
                    provide: _hashStringuseCase.HashStringUseCase,
                    useValue: mockHashStringUseCase
                },
                {
                    provide: _compareHashuseCase.CompareHashUseCase,
                    useValue: mockCompareHashUseCase
                },
                {
                    provide: _getUserByEmailuseCase.GetUserByEmailUseCase,
                    useValue: mockGetUserByEmailUseCase
                },
                {
                    provide: _changePassworduseCase.ChangePasswordUseCase,
                    useValue: mockChangePasswordUseCase
                },
                {
                    provide: _createDonoruseCase.CreateDonorUseCase,
                    useValue: mockCreateDonorUseCase
                },
                {
                    provide: _createCompanyuseCase.CreateCompanyUseCase,
                    useValue: mockCreateCompanyUseCase
                }
            ]
        }).compile();
        service = module.get(_usersservice.UsersService);
        getUserUseCase = module.get(_getUseruseCase.GetUserUseCase);
        createUserUseCase = module.get(_createUseruseCase.CreateUserUseCase);
        hashStringUseCase = module.get(_hashStringuseCase.HashStringUseCase);
        compareHashUseCase = module.get(_compareHashuseCase.CompareHashUseCase);
        getUserByEmailUseCase = module.get(_getUserByEmailuseCase.GetUserByEmailUseCase);
        changePasswordUseCase = module.get(_changePassworduseCase.ChangePasswordUseCase);
        createDonorUseCase = module.get(_createDonoruseCase.CreateDonorUseCase);
        createCompanyUseCase = module.get(_createCompanyuseCase.CreateCompanyUseCase);
    });
    describe('getUserById', ()=>{
        const mockUser = {
            id: '123e4567-e89b-12d3-a456-426614174000',
            email: 'test@example.com',
            password: 'hashedPassword123',
            name: 'John Doe',
            city: 'S達o Paulo',
            uf: 'SP',
            zipcode: '01234-567',
            personType: 'DONOR'
        };
        it('should return user without password when user exists', async ()=>{
            getUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(mockUser));
            const result = await service.getUserById(mockUser.id);
            expect(result.isSuccess).toBe(true);
            expect(result.value?.password).toBeUndefined();
            expect(result.value?.id).toBe(mockUser.id);
            expect(result.value?.email).toBe(mockUser.email);
            expect(getUserUseCase.execute).toHaveBeenCalledWith(mockUser.id);
        });
        it('should return failure when user does not exist', async ()=>{
            getUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFoundError));
            const result = await service.getUserById('nonexistent-id');
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.UserNotFoundError);
        });
        it('should handle different user types', async ()=>{
            const donorUser = {
                ...mockUser,
                personType: 'DONOR'
            };
            getUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(donorUser));
            const result = await service.getUserById('donor-id');
            expect(result.isSuccess).toBe(true);
            expect(result.value?.personType).toBe('DONOR');
        });
    });
    describe('createUser', ()=>{
        const donorRequest = {
            email: 'donor@example.com',
            password: 'plainPassword123',
            name: 'John Donor',
            city: 'S達o Paulo',
            uf: 'SP',
            zipcode: '01234-567',
            personType: _usertypes.PersonType.DONOR,
            cpf: '123.456.789-00',
            bloodType: 'O+',
            birthDate: new Date('1990-05-15')
        };
        const companyRequest = {
            email: 'company@example.com',
            password: 'plainPassword123',
            name: 'Hospital Company',
            city: 'S達o Paulo',
            uf: 'SP',
            zipcode: '01234-567',
            personType: _usertypes.PersonType.COMPANY,
            cnpj: '12.345.678/0001-90',
            institutionName: 'Hospital S達o Lucas',
            cnes: '1234567'
        };
        it('should create donor user successfully', async ()=>{
            const hashedPassword = 'hashedPassword123';
            const createdUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: donorRequest.email,
                password: hashedPassword,
                name: donorRequest.name,
                city: donorRequest.city,
                uf: donorRequest.uf,
                zipcode: donorRequest.zipcode,
                personType: donorRequest.personType
            };
            hashStringUseCase.execute.mockReturnValue(hashedPassword);
            createUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(createdUser));
            createDonorUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success({
                id: 'donor-id',
                cpf: donorRequest.cpf,
                bloodType: donorRequest.bloodType,
                birthDate: donorRequest.birthDate,
                fkUserId: createdUser.id
            }));
            const result = await service.createUser(donorRequest);
            expect(result.isSuccess).toBe(true);
            expect(result.value).toEqual(createdUser);
            expect(hashStringUseCase.execute).toHaveBeenCalledWith('plainPassword123');
            expect(createUserUseCase.execute).toHaveBeenCalledWith({
                ...donorRequest,
                password: hashedPassword
            });
            expect(createDonorUseCase.execute).toHaveBeenCalledWith({
                cpf: donorRequest.cpf,
                bloodType: donorRequest.bloodType,
                birthDate: donorRequest.birthDate,
                fkUserId: createdUser.id
            });
        });
        it('should create company user successfully', async ()=>{
            const hashedPassword = 'hashedPassword123';
            const createdUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: companyRequest.email,
                password: hashedPassword,
                name: companyRequest.name,
                city: companyRequest.city,
                uf: companyRequest.uf,
                zipcode: companyRequest.zipcode,
                personType: companyRequest.personType
            };
            hashStringUseCase.execute.mockReturnValue(hashedPassword);
            createUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(createdUser));
            createCompanyUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success({
                id: 'company-id',
                cnpj: companyRequest.cnpj,
                institutionName: companyRequest.institutionName,
                cnes: companyRequest.cnes,
                fkUserId: createdUser.id
            }));
            const result = await service.createUser(companyRequest);
            expect(result.isSuccess).toBe(true);
            expect(result.value).toEqual(createdUser);
            expect(createCompanyUseCase.execute).toHaveBeenCalledWith({
                cnpj: companyRequest.cnpj,
                institutionName: companyRequest.institutionName,
                cnes: companyRequest.cnes,
                fkUserId: createdUser.id
            });
        });
        it('should return partial success when user is created but donor creation fails', async ()=>{
            const hashedPassword = 'hashedPassword123';
            const createdUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: donorRequest.email,
                password: hashedPassword,
                name: donorRequest.name,
                city: donorRequest.city,
                uf: donorRequest.uf,
                zipcode: donorRequest.zipcode,
                personType: donorRequest.personType
            };
            hashStringUseCase.execute.mockReturnValue(hashedPassword);
            createUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(createdUser));
            createDonorUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.DonorAlreadyExists));
            const result = await service.createUser(donorRequest);
            expect(result.isSuccess).toBe(true);
            expect(result.isPartialSuccess).toBe(true);
            expect(result.value).toEqual(createdUser);
        });
        it('should return failure when user creation fails', async ()=>{
            const hashedPassword = 'hashedPassword123';
            hashStringUseCase.execute.mockReturnValue(hashedPassword);
            createUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserAlreadyExists));
            const result = await service.createUser(donorRequest);
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.UserAlreadyExists);
            expect(createDonorUseCase.execute).not.toHaveBeenCalled();
        });
        it('should return failure when personType is missing', async ()=>{
            const invalidRequest = {
                ...donorRequest,
                personType: undefined
            };
            const hashedPassword = 'hashedPassword123';
            const createdUser = {
                id: '123e4567-e89b-12d3-a456-426614174000',
                email: invalidRequest.email,
                password: hashedPassword,
                name: invalidRequest.name,
                city: invalidRequest.city,
                uf: invalidRequest.uf,
                zipcode: invalidRequest.zipcode,
                personType: invalidRequest.personType
            };
            hashStringUseCase.execute.mockReturnValue(hashedPassword);
            createUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(createdUser));
            const result = await service.createUser(invalidRequest);
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.UserNotFoundError);
        });
    });
    describe('authenticate', ()=>{
        const authRequest = {
            email: 'test@example.com',
            password: 'plainPassword123'
        };
        const mockUser = {
            id: '123e4567-e89b-12d3-a456-426614174000',
            email: authRequest.email,
            password: 'hashedPassword123',
            name: 'John Doe',
            city: 'S達o Paulo',
            uf: 'SP',
            personType: 'DONOR'
        };
        it('should authenticate user successfully with correct credentials', async ()=>{
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(mockUser));
            compareHashUseCase.execute.mockReturnValue(true);
            const result = await service.authenticate(authRequest);
            expect(result.isSuccess).toBe(true);
            expect(result.value?.password).toBeUndefined();
            expect(result.value?.email).toBe(authRequest.email);
            expect(getUserByEmailUseCase.execute).toHaveBeenCalledWith(authRequest.email);
            expect(compareHashUseCase.execute).toHaveBeenCalledWith({
                password: authRequest.password,
                hash: 'hashedPassword123'
            });
        });
        it('should return failure when user is not found', async ()=>{
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFound));
            const result = await service.authenticate(authRequest);
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.UserNotFound);
            expect(compareHashUseCase.execute).not.toHaveBeenCalled();
        });
        it('should return failure when password is incorrect', async ()=>{
            getUserByEmailUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(mockUser));
            compareHashUseCase.execute.mockReturnValue(false);
            const result = await service.authenticate(authRequest);
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.InvalidPassword);
        });
    });
    describe('changePassword', ()=>{
        const userId = '123e4567-e89b-12d3-a456-426614174000';
        const passwords = {
            old: 'oldPassword123',
            new: 'newPassword456'
        };
        const mockUser = {
            id: userId,
            email: 'test@example.com',
            password: 'hashedOldPassword',
            name: 'John Doe',
            city: 'S達o Paulo',
            uf: 'SP',
            personType: 'DONOR'
        };
        it('should change password successfully with correct old password', async ()=>{
            const hashedNewPassword = 'hashedNewPassword456';
            const updatedUser = {
                ...mockUser,
                password: hashedNewPassword
            };
            getUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(mockUser));
            compareHashUseCase.execute.mockReturnValue(true);
            hashStringUseCase.execute.mockReturnValue(hashedNewPassword);
            changePasswordUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(updatedUser));
            const result = await service.changePassword(userId, passwords);
            expect(result.isSuccess).toBe(true);
            expect(result.value).toEqual(updatedUser);
            expect(getUserUseCase.execute).toHaveBeenCalledWith(userId);
            expect(compareHashUseCase.execute).toHaveBeenCalledWith({
                password: passwords.old,
                hash: mockUser.password
            });
            expect(hashStringUseCase.execute).toHaveBeenCalledWith(passwords.new);
            expect(changePasswordUseCase.execute).toHaveBeenCalledWith({
                id: userId,
                newPassword: hashedNewPassword
            });
        });
        it('should return failure when user is not found', async ()=>{
            getUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFoundError));
            const result = await service.changePassword(userId, passwords);
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.UserNotFoundError);
            expect(compareHashUseCase.execute).not.toHaveBeenCalled();
        });
        it('should return failure when old password is incorrect', async ()=>{
            getUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(mockUser));
            compareHashUseCase.execute.mockReturnValue(false);
            const result = await service.changePassword(userId, passwords);
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.InvalidPassword);
            expect(hashStringUseCase.execute).not.toHaveBeenCalled();
            expect(changePasswordUseCase.execute).not.toHaveBeenCalled();
        });
        it('should return failure when password change operation fails', async ()=>{
            const hashedNewPassword = 'hashedNewPassword456';
            getUserUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.success(mockUser));
            compareHashUseCase.execute.mockReturnValue(true);
            hashStringUseCase.execute.mockReturnValue(hashedNewPassword);
            changePasswordUseCase.execute.mockResolvedValue(_resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFoundError));
            const result = await service.changePassword(userId, passwords);
            expect(result.isSuccess).toBe(false);
            expect(result.error).toBe(_errorsenum.ErrorsEnum.UserNotFoundError);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,