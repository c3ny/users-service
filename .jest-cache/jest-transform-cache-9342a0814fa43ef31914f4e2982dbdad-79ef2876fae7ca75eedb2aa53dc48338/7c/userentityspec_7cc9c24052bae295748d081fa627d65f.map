{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/core/domain/user.entity.spec.ts"],"sourcesContent":["import { User } from './user.entity';\n\ndescribe('User Entity', () => {\n  describe('User creation', () => {\n    it('should create a user with all required properties', () => {\n      const userData = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        password: 'hashedPassword123',\n        name: 'John Doe',\n        city: 'São Paulo',\n        uf: 'SP',\n        zipcode: '01234-567',\n        personType: 'DONOR',\n      };\n\n      const user = new User();\n      Object.assign(user, userData);\n\n      expect(user.id).toBe(userData.id);\n      expect(user.email).toBe(userData.email);\n      expect(user.password).toBe(userData.password);\n      expect(user.name).toBe(userData.name);\n      expect(user.city).toBe(userData.city);\n      expect(user.uf).toBe(userData.uf);\n      expect(user.zipcode).toBe(userData.zipcode);\n      expect(user.personType).toBe(userData.personType);\n    });\n\n    it('should create a user without optional properties', () => {\n      const userData = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        name: 'John Doe',\n        city: 'São Paulo',\n        uf: 'SP',\n        personType: 'COMPANY',\n      };\n\n      const user = new User();\n      Object.assign(user, userData);\n\n      expect(user.id).toBe(userData.id);\n      expect(user.email).toBe(userData.email);\n      expect(user.password).toBeUndefined();\n      expect(user.name).toBe(userData.name);\n      expect(user.city).toBe(userData.city);\n      expect(user.uf).toBe(userData.uf);\n      expect(user.zipcode).toBeUndefined();\n      expect(user.personType).toBe(userData.personType);\n    });\n\n    it('should handle different person types', () => {\n      const donorUser = new User();\n      donorUser.personType = 'DONOR';\n\n      const companyUser = new User();\n      companyUser.personType = 'COMPANY';\n\n      expect(donorUser.personType).toBe('DONOR');\n      expect(companyUser.personType).toBe('COMPANY');\n    });\n\n    it('should handle different UF values', () => {\n      const states = ['SP', 'RJ', 'MG', 'RS', 'PR', 'SC', 'BA', 'GO'];\n\n      states.forEach((uf) => {\n        const user = new User();\n        user.uf = uf;\n        expect(user.uf).toBe(uf);\n      });\n    });\n\n    it('should handle email validation format', () => {\n      const validEmails = [\n        'test@example.com',\n        'user.name@domain.co.uk',\n        'user+tag@example.org',\n        'user123@test-domain.com',\n      ];\n\n      validEmails.forEach((email) => {\n        const user = new User();\n        user.email = email;\n        expect(user.email).toBe(email);\n      });\n    });\n\n    it('should handle zipcode with and without mask', () => {\n      const user1 = new User();\n      user1.zipcode = '01234-567';\n\n      const user2 = new User();\n      user2.zipcode = '01234567';\n\n      expect(user1.zipcode).toBe('01234-567');\n      expect(user2.zipcode).toBe('01234567');\n    });\n  });\n\n  describe('User properties validation', () => {\n    it('should allow empty password for certain operations', () => {\n      const user = new User();\n      user.password = undefined;\n\n      expect(user.password).toBeUndefined();\n    });\n\n    it('should handle long names', () => {\n      const user = new User();\n      user.name = 'João da Silva Santos Oliveira Pereira';\n\n      expect(user.name).toBe('João da Silva Santos Oliveira Pereira');\n    });\n\n    it('should handle city names with special characters', () => {\n      const cities = [\n        'São Paulo',\n        'Ribeirão Preto',\n        'Poços de Caldas',\n        'Três Corações',\n      ];\n\n      cities.forEach((city) => {\n        const user = new User();\n        user.city = city;\n        expect(user.city).toBe(city);\n      });\n    });\n  });\n});\n"],"names":["describe","it","userData","id","email","password","name","city","uf","zipcode","personType","user","User","Object","assign","expect","toBe","toBeUndefined","donorUser","companyUser","states","forEach","validEmails","user1","user2","undefined","cities"],"mappings":"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"}