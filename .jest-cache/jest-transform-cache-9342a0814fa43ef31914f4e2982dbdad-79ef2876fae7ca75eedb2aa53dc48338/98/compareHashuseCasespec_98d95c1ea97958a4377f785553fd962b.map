{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/modules/Hash/application/ports/in/compareHash.useCase.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport {\n  CompareHashUseCase,\n  CompareHashUseCaseParams,\n} from './compareHash.useCase';\nimport { HashRepositoryPort } from '../out/hash-repository.port';\nimport { HASH_REPOSITORY } from '../../../constants';\n\ndescribe('CompareHashUseCase', () => {\n  let useCase: CompareHashUseCase;\n  let hashRepository: jest.Mocked<HashRepositoryPort>;\n\n  beforeEach(async () => {\n    const mockHashRepository = {\n      hash: jest.fn(),\n      compare: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CompareHashUseCase,\n        {\n          provide: HASH_REPOSITORY,\n          useValue: mockHashRepository,\n        },\n      ],\n    }).compile();\n\n    useCase = module.get<CompareHashUseCase>(CompareHashUseCase);\n    hashRepository = module.get(HASH_REPOSITORY);\n  });\n\n  describe('execute', () => {\n    it('should return true when password matches hash', () => {\n      const params: CompareHashUseCaseParams = {\n        password: 'mySecretPassword123',\n        hash: 'hashedPassword123',\n      };\n\n      hashRepository.compare.mockReturnValue(true);\n\n      const result = useCase.execute(params);\n\n      expect(result).toBe(true);\n      expect(hashRepository.compare).toHaveBeenCalledWith(\n        params.password,\n        params.hash,\n      );\n    });\n\n    it('should return false when password does not match hash', () => {\n      const params: CompareHashUseCaseParams = {\n        password: 'wrongPassword',\n        hash: 'hashedPassword123',\n      };\n\n      hashRepository.compare.mockReturnValue(false);\n\n      const result = useCase.execute(params);\n\n      expect(result).toBe(false);\n      expect(hashRepository.compare).toHaveBeenCalledWith(\n        params.password,\n        params.hash,\n      );\n    });\n\n    it('should handle empty password', () => {\n      const params: CompareHashUseCaseParams = {\n        password: '',\n        hash: 'hashedPassword123',\n      };\n\n      hashRepository.compare.mockReturnValue(false);\n\n      const result = useCase.execute(params);\n\n      expect(result).toBe(false);\n      expect(hashRepository.compare).toHaveBeenCalledWith(\n        params.password,\n        params.hash,\n      );\n    });\n\n    it('should handle empty hash', () => {\n      const params: CompareHashUseCaseParams = {\n        password: 'myPassword',\n        hash: '',\n      };\n\n      hashRepository.compare.mockReturnValue(false);\n\n      const result = useCase.execute(params);\n\n      expect(result).toBe(false);\n      expect(hashRepository.compare).toHaveBeenCalledWith(\n        params.password,\n        params.hash,\n      );\n    });\n\n    it('should handle both empty password and hash', () => {\n      const params: CompareHashUseCaseParams = {\n        password: '',\n        hash: '',\n      };\n\n      hashRepository.compare.mockReturnValue(true);\n\n      const result = useCase.execute(params);\n\n      expect(result).toBe(true);\n      expect(hashRepository.compare).toHaveBeenCalledWith(\n        params.password,\n        params.hash,\n      );\n    });\n\n    it('should handle different password lengths', () => {\n      const passwords = [\n        'a', // Single character\n        'short', // Short password\n        'mediumLengthPassword123', // Medium password\n        'veryLongPasswordWithManyCharactersAndNumbers123456789', // Long password\n      ];\n\n      passwords.forEach((password, index) => {\n        const params: CompareHashUseCaseParams = {\n          password,\n          hash: `hash_${index}`,\n        };\n\n        const expectedResult = index % 2 === 0; // Alternate true/false\n        hashRepository.compare.mockReturnValue(expectedResult);\n\n        const result = useCase.execute(params);\n\n        expect(result).toBe(expectedResult);\n        expect(hashRepository.compare).toHaveBeenCalledWith(\n          password,\n          params.hash,\n        );\n      });\n    });\n\n    it('should handle passwords with special characters', () => {\n      const specialPasswords = [\n        'password@123',\n        'p@ssw0rd!',\n        'mY$ecr3t#P@ssw0rd',\n        'test!@#$%^&*()_+',\n        'àáâãäåæçèéêë',\n      ];\n\n      specialPasswords.forEach((password, index) => {\n        const params: CompareHashUseCaseParams = {\n          password,\n          hash: `special_hash_${index}`,\n        };\n\n        hashRepository.compare.mockReturnValue(true);\n\n        const result = useCase.execute(params);\n\n        expect(result).toBe(true);\n        expect(hashRepository.compare).toHaveBeenCalledWith(\n          password,\n          params.hash,\n        );\n      });\n    });\n\n    it('should handle case sensitivity', () => {\n      const testCases = [\n        { password: 'Password123', hash: 'hash1', expected: true },\n        { password: 'password123', hash: 'hash1', expected: false },\n        { password: 'PASSWORD123', hash: 'hash1', expected: false },\n      ];\n\n      testCases.forEach((testCase, index) => {\n        const params: CompareHashUseCaseParams = {\n          password: testCase.password,\n          hash: testCase.hash,\n        };\n\n        hashRepository.compare.mockReturnValue(testCase.expected);\n\n        const result = useCase.execute(params);\n\n        expect(result).toBe(testCase.expected);\n        expect(hashRepository.compare).toHaveBeenCalledWith(\n          testCase.password,\n          testCase.hash,\n        );\n      });\n    });\n\n    it('should handle Unicode characters', () => {\n      const unicodePasswords = [\n        'contraseña123', // Spanish\n        'пароль123', // Russian\n        '密码123', // Chinese\n        'パスワード123', // Japanese\n        '🔐🔑🛡️', // Emojis\n      ];\n\n      unicodePasswords.forEach((password, index) => {\n        const params: CompareHashUseCaseParams = {\n          password,\n          hash: `unicode_hash_${index}`,\n        };\n\n        hashRepository.compare.mockReturnValue(true);\n\n        const result = useCase.execute(params);\n\n        expect(result).toBe(true);\n        expect(hashRepository.compare).toHaveBeenCalledWith(\n          password,\n          params.hash,\n        );\n      });\n    });\n\n    it('should handle passwords with spaces', () => {\n      const passwordsWithSpaces = [\n        'password with spaces',\n        ' leading space',\n        'trailing space ',\n        '  multiple  spaces  ',\n      ];\n\n      passwordsWithSpaces.forEach((password, index) => {\n        const params: CompareHashUseCaseParams = {\n          password,\n          hash: `space_hash_${index}`,\n        };\n\n        hashRepository.compare.mockReturnValue(true);\n\n        const result = useCase.execute(params);\n\n        expect(result).toBe(true);\n        expect(hashRepository.compare).toHaveBeenCalledWith(\n          password,\n          params.hash,\n        );\n      });\n    });\n\n    it('should handle repository errors gracefully', () => {\n      const params: CompareHashUseCaseParams = {\n        password: 'testPassword',\n        hash: 'testHash',\n      };\n\n      hashRepository.compare.mockImplementation(() => {\n        throw new Error('Hash comparison service unavailable');\n      });\n\n      expect(() => useCase.execute(params)).toThrow(\n        'Hash comparison service unavailable',\n      );\n      expect(hashRepository.compare).toHaveBeenCalledWith(\n        params.password,\n        params.hash,\n      );\n    });\n\n    it('should handle multiple comparison attempts with same credentials', () => {\n      const params: CompareHashUseCaseParams = {\n        password: 'samePassword123',\n        hash: 'sameHash123',\n      };\n\n      hashRepository.compare.mockReturnValue(true);\n\n      const result1 = useCase.execute(params);\n      const result2 = useCase.execute(params);\n      const result3 = useCase.execute(params);\n\n      expect(result1).toBe(true);\n      expect(result2).toBe(true);\n      expect(result3).toBe(true);\n      expect(hashRepository.compare).toHaveBeenCalledTimes(3);\n    });\n\n    it('should handle concurrent comparison requests', () => {\n      const testCases = [\n        { password: 'password1', hash: 'hash1', expected: true },\n        { password: 'password2', hash: 'hash2', expected: false },\n        { password: 'password3', hash: 'hash3', expected: true },\n        { password: 'password4', hash: 'hash4', expected: false },\n        { password: 'password5', hash: 'hash5', expected: true },\n      ];\n\n      testCases.forEach((testCase, index) => {\n        hashRepository.compare.mockReturnValueOnce(testCase.expected);\n      });\n\n      const results = testCases.map((testCase) =>\n        useCase.execute({ password: testCase.password, hash: testCase.hash }),\n      );\n\n      results.forEach((result, index) => {\n        expect(result).toBe(testCases[index].expected);\n      });\n\n      expect(hashRepository.compare).toHaveBeenCalledTimes(5);\n    });\n\n    it('should handle authentication scenarios', () => {\n      const authenticationTests = [\n        {\n          scenario: 'Valid login',\n          password: 'userPassword123',\n          hash: 'validHashForUser123',\n          expected: true,\n        },\n        {\n          scenario: 'Invalid password',\n          password: 'wrongPassword',\n          hash: 'validHashForUser123',\n          expected: false,\n        },\n        {\n          scenario: 'Brute force attempt',\n          password: '123456',\n          hash: 'validHashForUser123',\n          expected: false,\n        },\n      ];\n\n      authenticationTests.forEach((test) => {\n        const params: CompareHashUseCaseParams = {\n          password: test.password,\n          hash: test.hash,\n        };\n\n        hashRepository.compare.mockReturnValue(test.expected);\n\n        const result = useCase.execute(params);\n\n        expect(result).toBe(test.expected);\n        expect(hashRepository.compare).toHaveBeenCalledWith(\n          test.password,\n          test.hash,\n        );\n      });\n    });\n\n    it('should handle edge case characters', () => {\n      const edgeCases = [\n        { password: '\\n', hash: 'newline_hash' },\n        { password: '\\t', hash: 'tab_hash' },\n        { password: '\\r', hash: 'carriage_return_hash' },\n        { password: '\\0', hash: 'null_char_hash' },\n        { password: '\\\\', hash: 'backslash_hash' },\n        { password: '\"', hash: 'quote_hash' },\n        { password: \"'\", hash: 'single_quote_hash' },\n      ];\n\n      edgeCases.forEach((edgeCase, index) => {\n        const params: CompareHashUseCaseParams = {\n          password: edgeCase.password,\n          hash: edgeCase.hash,\n        };\n\n        const expected = index % 2 === 0;\n        hashRepository.compare.mockReturnValue(expected);\n\n        const result = useCase.execute(params);\n\n        expect(result).toBe(expected);\n        expect(hashRepository.compare).toHaveBeenCalledWith(\n          edgeCase.password,\n          edgeCase.hash,\n        );\n      });\n    });\n\n    it('should handle very long passwords and hashes', () => {\n      const veryLongPassword = 'a'.repeat(10000); // 10,000 characters\n      const veryLongHash = 'h'.repeat(10000); // 10,000 characters\n\n      const params: CompareHashUseCaseParams = {\n        password: veryLongPassword,\n        hash: veryLongHash,\n      };\n\n      hashRepository.compare.mockReturnValue(true);\n\n      const result = useCase.execute(params);\n\n      expect(result).toBe(true);\n      expect(hashRepository.compare).toHaveBeenCalledWith(\n        veryLongPassword,\n        veryLongHash,\n      );\n    });\n\n    it('should handle common attack patterns', () => {\n      const attackPatterns = [\n        { password: 'admin', hash: 'user_hash', expected: false },\n        { password: 'password', hash: 'user_hash', expected: false },\n        { password: '123456', hash: 'user_hash', expected: false },\n        { password: 'qwerty', hash: 'user_hash', expected: false },\n        { password: '', hash: 'user_hash', expected: false }, // Empty password attack\n      ];\n\n      attackPatterns.forEach((pattern) => {\n        const params: CompareHashUseCaseParams = {\n          password: pattern.password,\n          hash: pattern.hash,\n        };\n\n        hashRepository.compare.mockReturnValue(pattern.expected);\n\n        const result = useCase.execute(params);\n\n        expect(result).toBe(pattern.expected);\n        expect(hashRepository.compare).toHaveBeenCalledWith(\n          pattern.password,\n          pattern.hash,\n        );\n      });\n    });\n  });\n});\n"],"names":["describe","useCase","hashRepository","beforeEach","mockHashRepository","hash","jest","fn","compare","module","Test","createTestingModule","providers","CompareHashUseCase","provide","HASH_REPOSITORY","useValue","compile","get","it","params","password","mockReturnValue","result","execute","expect","toBe","toHaveBeenCalledWith","passwords","forEach","index","expectedResult","specialPasswords","testCases","expected","testCase","unicodePasswords","passwordsWithSpaces","mockImplementation","Error","toThrow","result1","result2","result3","toHaveBeenCalledTimes","mockReturnValueOnce","results","map","authenticationTests","scenario","test","edgeCases","edgeCase","veryLongPassword","repeat","veryLongHash","attackPatterns","pattern"],"mappings":"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"}