{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/adapters/out/mappers/user.mapper.spec.ts"],"sourcesContent":["import { UserMapper } from './user.mapper';\nimport { User } from '../../../application/core/domain/user.entity';\nimport { Users } from '../domain/user.entity';\n\ndescribe('UserMapper', () => {\n  describe('toDomain', () => {\n    it('should map Users entity to User domain object with all properties', () => {\n      const usersEntity = new Users();\n      usersEntity.id = '123e4567-e89b-12d3-a456-426614174000';\n      usersEntity.email = 'test@example.com';\n      usersEntity.password = 'hashedPassword123';\n      usersEntity.name = 'John Doe';\n      usersEntity.city = 'São Paulo';\n      usersEntity.uf = 'SP';\n      usersEntity.zipcode = '01234-567';\n      usersEntity.personType = 'DONOR';\n\n      const domainUser = UserMapper.toDomain(usersEntity);\n\n      expect(domainUser).toBeInstanceOf(Object);\n      expect(domainUser.id).toBe(usersEntity.id);\n      expect(domainUser.email).toBe(usersEntity.email);\n      expect(domainUser.password).toBe(usersEntity.password);\n      expect(domainUser.name).toBe(usersEntity.name);\n      expect(domainUser.city).toBe(usersEntity.city);\n      expect(domainUser.uf).toBe(usersEntity.uf);\n      expect(domainUser.zipcode).toBe(usersEntity.zipcode);\n      expect(domainUser.personType).toBe(usersEntity.personType);\n    });\n\n    it('should map Users entity to User domain object without optional properties', () => {\n      const usersEntity = new Users();\n      usersEntity.id = '123e4567-e89b-12d3-a456-426614174000';\n      usersEntity.email = 'test@example.com';\n      usersEntity.name = 'John Doe';\n      usersEntity.city = 'São Paulo';\n      usersEntity.uf = 'SP';\n      usersEntity.personType = 'COMPANY';\n\n      const domainUser = UserMapper.toDomain(usersEntity);\n\n      expect(domainUser.id).toBe(usersEntity.id);\n      expect(domainUser.email).toBe(usersEntity.email);\n      expect(domainUser.password).toBeUndefined();\n      expect(domainUser.name).toBe(usersEntity.name);\n      expect(domainUser.city).toBe(usersEntity.city);\n      expect(domainUser.uf).toBe(usersEntity.uf);\n      expect(domainUser.zipcode).toBeUndefined();\n      expect(domainUser.personType).toBe(usersEntity.personType);\n    });\n\n    it('should handle different person types', () => {\n      const donorEntity = new Users();\n      donorEntity.personType = 'DONOR';\n\n      const companyEntity = new Users();\n      companyEntity.personType = 'COMPANY';\n\n      const donorDomain = UserMapper.toDomain(donorEntity);\n      const companyDomain = UserMapper.toDomain(companyEntity);\n\n      expect(donorDomain.personType).toBe('DONOR');\n      expect(companyDomain.personType).toBe('COMPANY');\n    });\n  });\n\n  describe('toPersistence', () => {\n    it('should map User domain object to Users entity with all properties', () => {\n      const domainUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        password: 'hashedPassword123',\n        name: 'John Doe',\n        city: 'São Paulo',\n        uf: 'SP',\n        zipcode: '01234-567',\n        personType: 'DONOR',\n      };\n\n      const persistenceUser = UserMapper.toPersistence(domainUser);\n\n      expect(persistenceUser).toBeInstanceOf(Users);\n      expect(persistenceUser.email).toBe(domainUser.email);\n      expect(persistenceUser.password).toBe(domainUser.password);\n      expect(persistenceUser.name).toBe(domainUser.name);\n      expect(persistenceUser.city).toBe(domainUser.city);\n      expect(persistenceUser.uf).toBe(domainUser.uf);\n      expect(persistenceUser.zipcode).toBe(domainUser.zipcode);\n      expect(persistenceUser.personType).toBe(domainUser.personType);\n    });\n\n    it('should map User domain object to Users entity without optional properties', () => {\n      const domainUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        name: 'John Doe',\n        city: 'São Paulo',\n        uf: 'SP',\n        personType: 'COMPANY',\n      };\n\n      const persistenceUser = UserMapper.toPersistence(domainUser);\n\n      expect(persistenceUser.email).toBe(domainUser.email);\n      expect(persistenceUser.password).toBeUndefined();\n      expect(persistenceUser.name).toBe(domainUser.name);\n      expect(persistenceUser.city).toBe(domainUser.city);\n      expect(persistenceUser.uf).toBe(domainUser.uf);\n      expect(persistenceUser.zipcode).toBe(''); // Default empty string\n      expect(persistenceUser.personType).toBe(domainUser.personType);\n    });\n\n    it('should handle zipcode default value when undefined', () => {\n      const domainUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        name: 'John Doe',\n        city: 'São Paulo',\n        uf: 'SP',\n        personType: 'DONOR',\n        zipcode: undefined,\n      };\n\n      const persistenceUser = UserMapper.toPersistence(domainUser);\n\n      expect(persistenceUser.zipcode).toBe('');\n    });\n\n    it('should preserve zipcode when provided', () => {\n      const domainUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        name: 'John Doe',\n        city: 'São Paulo',\n        uf: 'SP',\n        personType: 'DONOR',\n        zipcode: '01234-567',\n      };\n\n      const persistenceUser = UserMapper.toPersistence(domainUser);\n\n      expect(persistenceUser.zipcode).toBe('01234-567');\n    });\n\n    it('should handle different person types in persistence', () => {\n      const donorUser: User = {\n        id: '1',\n        email: 'donor@test.com',\n        name: 'Donor User',\n        city: 'City',\n        uf: 'SP',\n        personType: 'DONOR',\n      };\n\n      const companyUser: User = {\n        id: '2',\n        email: 'company@test.com',\n        name: 'Company User',\n        city: 'City',\n        uf: 'SP',\n        personType: 'COMPANY',\n      };\n\n      const donorPersistence = UserMapper.toPersistence(donorUser);\n      const companyPersistence = UserMapper.toPersistence(companyUser);\n\n      expect(donorPersistence.personType).toBe('DONOR');\n      expect(companyPersistence.personType).toBe('COMPANY');\n    });\n  });\n\n  describe('bidirectional mapping', () => {\n    it('should maintain data integrity in round-trip mapping', () => {\n      const originalDomain: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        password: 'hashedPassword123',\n        name: 'John Doe',\n        city: 'São Paulo',\n        uf: 'SP',\n        zipcode: '01234-567',\n        personType: 'DONOR',\n      };\n\n      const persistence = UserMapper.toPersistence(originalDomain);\n      persistence.id = originalDomain.id; // Simulate database ID assignment\n      const backToDomain = UserMapper.toDomain(persistence);\n\n      expect(backToDomain.id).toBe(originalDomain.id);\n      expect(backToDomain.email).toBe(originalDomain.email);\n      expect(backToDomain.password).toBe(originalDomain.password);\n      expect(backToDomain.name).toBe(originalDomain.name);\n      expect(backToDomain.city).toBe(originalDomain.city);\n      expect(backToDomain.uf).toBe(originalDomain.uf);\n      expect(backToDomain.zipcode).toBe(originalDomain.zipcode);\n      expect(backToDomain.personType).toBe(originalDomain.personType);\n    });\n\n    it('should handle round-trip mapping without optional fields', () => {\n      const originalDomain: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'test@example.com',\n        name: 'John Doe',\n        city: 'São Paulo',\n        uf: 'SP',\n        personType: 'COMPANY',\n      };\n\n      const persistence = UserMapper.toPersistence(originalDomain);\n      persistence.id = originalDomain.id;\n      const backToDomain = UserMapper.toDomain(persistence);\n\n      expect(backToDomain.id).toBe(originalDomain.id);\n      expect(backToDomain.email).toBe(originalDomain.email);\n      expect(backToDomain.name).toBe(originalDomain.name);\n      expect(backToDomain.city).toBe(originalDomain.city);\n      expect(backToDomain.uf).toBe(originalDomain.uf);\n      expect(backToDomain.personType).toBe(originalDomain.personType);\n      expect(backToDomain.zipcode).toBe(''); // Default value from toPersistence\n    });\n  });\n});\n"],"names":["describe","it","usersEntity","Users","id","email","password","name","city","uf","zipcode","personType","domainUser","UserMapper","toDomain","expect","toBeInstanceOf","Object","toBe","toBeUndefined","donorEntity","companyEntity","donorDomain","companyDomain","persistenceUser","toPersistence","undefined","donorUser","companyUser","donorPersistence","companyPersistence","originalDomain","persistence","backToDomain"],"mappings":"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"}