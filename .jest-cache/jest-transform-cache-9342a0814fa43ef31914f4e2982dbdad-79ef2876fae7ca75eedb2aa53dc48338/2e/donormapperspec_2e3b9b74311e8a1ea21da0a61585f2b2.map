{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/adapters/out/mappers/donor.mapper.spec.ts"],"sourcesContent":["import { DonorMapper, DonorPersistence } from './donor.mapper';\nimport { Donor } from '../../../application/core/domain/donor.entity';\n\ndescribe('DonorMapper', () => {\n  describe('toDomain', () => {\n    it('should map donor persistence object to Donor domain object with all properties', () => {\n      const donorPersistence = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        cpf: '123.456.789-00',\n        bloodType: 'O+',\n        birthDate: new Date('1990-05-15'),\n        fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n      };\n\n      const domainDonor = DonorMapper.toDomain(donorPersistence);\n\n      expect(domainDonor).toBeInstanceOf(Object);\n      expect(domainDonor.id).toBe(donorPersistence.id);\n      expect(domainDonor.cpf).toBe(donorPersistence.cpf);\n      expect(domainDonor.bloodType).toBe(donorPersistence.bloodType);\n      expect(domainDonor.birthDate).toBe(donorPersistence.birthDate);\n      expect(domainDonor.fkUserId).toBe(donorPersistence.fkUserId);\n    });\n\n    it('should handle different blood types', () => {\n      const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\n\n      bloodTypes.forEach((bloodType) => {\n        const donorPersistence = {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          cpf: '123.456.789-00',\n          bloodType,\n          birthDate: new Date('1990-05-15'),\n          fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n        };\n\n        const domainDonor = DonorMapper.toDomain(donorPersistence);\n        expect(domainDonor.bloodType).toBe(bloodType);\n      });\n    });\n\n    it('should handle different CPF formats', () => {\n      const cpfFormats = ['123.456.789-00', '12345678900', '987.654.321-11'];\n\n      cpfFormats.forEach((cpf) => {\n        const donorPersistence = {\n          id: '123e4567-e89b-12d3-a456-426614174000',\n          cpf,\n          bloodType: 'O+',\n          birthDate: new Date('1990-05-15'),\n          fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n        };\n\n        const domainDonor = DonorMapper.toDomain(donorPersistence);\n        expect(domainDonor.cpf).toBe(cpf);\n      });\n    });\n  });\n\n  describe('toPersistence', () => {\n    it('should map Donor domain object to persistence format with user relation', () => {\n      const domainDonor: Omit<Donor, 'id'> = {\n        cpf: '123.456.789-00',\n        bloodType: 'O+',\n        birthDate: new Date('1990-05-15'),\n        fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n      };\n\n      const persistenceDonor = DonorMapper.toPersistence(domainDonor);\n\n      expect(persistenceDonor.cpf).toBe(domainDonor.cpf);\n      expect(persistenceDonor.bloodType).toBe(domainDonor.bloodType);\n      expect(persistenceDonor.birthDate).toBe(domainDonor.birthDate);\n      expect(persistenceDonor.user).toEqual({ id: domainDonor.fkUserId });\n      expect(persistenceDonor.user.id).toBe(domainDonor.fkUserId);\n    });\n\n    it('should handle all blood types in persistence mapping', () => {\n      const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\n\n      bloodTypes.forEach((bloodType) => {\n        const domainDonor: Omit<Donor, 'id'> = {\n          cpf: '123.456.789-00',\n          bloodType,\n          birthDate: new Date('1990-05-15'),\n          fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n        };\n\n        const persistenceDonor = DonorMapper.toPersistence(domainDonor);\n        expect(persistenceDonor.bloodType).toBe(bloodType);\n      });\n    });\n\n    it('should handle different birth dates', () => {\n      const birthDates = [\n        new Date('1980-01-01'),\n        new Date('1995-12-31'),\n        new Date('2000-06-15'),\n        new Date('1975-03-20'),\n      ];\n\n      birthDates.forEach((birthDate) => {\n        const domainDonor: Omit<Donor, 'id'> = {\n          cpf: '123.456.789-00',\n          bloodType: 'B+',\n          birthDate,\n          fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n        };\n\n        const persistenceDonor = DonorMapper.toPersistence(domainDonor);\n        expect(persistenceDonor.birthDate).toBe(birthDate);\n      });\n    });\n\n    it('should properly map user foreign key relationship', () => {\n      const userIds = [\n        '123e4567-e89b-12d3-a456-426614174000',\n        '987e6543-e21b-34d5-a678-426614174111',\n        '456f7890-f12c-45e6-b789-426614174222',\n      ];\n\n      userIds.forEach((userId) => {\n        const domainDonor: Omit<Donor, 'id'> = {\n          cpf: '123.456.789-00',\n          bloodType: 'AB-',\n          birthDate: new Date('1990-05-15'),\n          fkUserId: userId,\n        };\n\n        const persistenceDonor = DonorMapper.toPersistence(domainDonor);\n        expect(persistenceDonor.user.id).toBe(userId);\n      });\n    });\n  });\n\n  describe('type safety', () => {\n    it('should ensure DonorPersistence type excludes id and fkUserId', () => {\n      const persistenceData: DonorPersistence = {\n        cpf: '123.456.789-00',\n        bloodType: 'O+',\n        birthDate: new Date('1990-05-15'),\n        user: { id: '987e6543-e21b-34d5-a678-426614174111' },\n      };\n\n      // This should compile without errors\n      expect(persistenceData.cpf).toBeDefined();\n      expect(persistenceData.bloodType).toBeDefined();\n      expect(persistenceData.birthDate).toBeDefined();\n      expect(persistenceData.user).toBeDefined();\n      expect(persistenceData.user.id).toBeDefined();\n    });\n\n    it('should handle edge cases in mapping', () => {\n      const edgeCaseDonor = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        cpf: '000.000.000-00',\n        bloodType: '',\n        birthDate: new Date('1900-01-01'),\n        fkUserId: '000e0000-e00b-00d0-a000-000000000000',\n      };\n\n      const domainDonor = DonorMapper.toDomain(edgeCaseDonor);\n      expect(domainDonor.cpf).toBe('000.000.000-00');\n      expect(domainDonor.bloodType).toBe(''); // Empty string should be preserved\n      expect(domainDonor.birthDate).toEqual(new Date('1900-01-01'));\n    });\n  });\n\n  describe('business logic validation', () => {\n    it('should handle universal donor blood type', () => {\n      const universalDonor = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        cpf: '123.456.789-00',\n        bloodType: 'O-',\n        birthDate: new Date('1990-05-15'),\n        fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n      };\n\n      const domainDonor = DonorMapper.toDomain(universalDonor);\n      expect(domainDonor.bloodType).toBe('O-');\n    });\n\n    it('should handle universal recipient blood type', () => {\n      const universalRecipient = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        cpf: '123.456.789-00',\n        bloodType: 'AB+',\n        birthDate: new Date('1990-05-15'),\n        fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n      };\n\n      const domainDonor = DonorMapper.toDomain(universalRecipient);\n      expect(domainDonor.bloodType).toBe('AB+');\n    });\n\n    it('should handle age-related birth dates', () => {\n      const today = new Date();\n      const eighteenYearsAgo = new Date(\n        today.getFullYear() - 18,\n        today.getMonth(),\n        today.getDate(),\n      );\n      const sixtyYearsAgo = new Date(\n        today.getFullYear() - 60,\n        today.getMonth(),\n        today.getDate(),\n      );\n\n      const youngDonor = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        cpf: '123.456.789-00',\n        bloodType: 'A+',\n        birthDate: eighteenYearsAgo,\n        fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n      };\n\n      const olderDonor = {\n        id: '456e7890-e12c-34d5-a678-426614174222',\n        cpf: '987.654.321-11',\n        bloodType: 'B-',\n        birthDate: sixtyYearsAgo,\n        fkUserId: '987e6543-e21b-34d5-a678-426614174111',\n      };\n\n      const youngDomainDonor = DonorMapper.toDomain(youngDonor);\n      const olderDomainDonor = DonorMapper.toDomain(olderDonor);\n\n      expect(youngDomainDonor.birthDate).toEqual(eighteenYearsAgo);\n      expect(olderDomainDonor.birthDate).toEqual(sixtyYearsAgo);\n    });\n  });\n});\n"],"names":["describe","it","donorPersistence","id","cpf","bloodType","birthDate","Date","fkUserId","domainDonor","DonorMapper","toDomain","expect","toBeInstanceOf","Object","toBe","bloodTypes","forEach","cpfFormats","persistenceDonor","toPersistence","user","toEqual","birthDates","userIds","userId","persistenceData","toBeDefined","edgeCaseDonor","universalDonor","universalRecipient","today","eighteenYearsAgo","getFullYear","getMonth","getDate","sixtyYearsAgo","youngDonor","olderDonor","youngDomainDonor","olderDomainDonor"],"mappings":"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"}