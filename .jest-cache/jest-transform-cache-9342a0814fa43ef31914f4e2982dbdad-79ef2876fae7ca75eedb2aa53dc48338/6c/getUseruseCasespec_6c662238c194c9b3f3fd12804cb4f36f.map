{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/ports/in/user/getUser.useCase.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { GetUserUseCase } from './getUser.useCase';\nimport { UserRepositoryPort } from '../../out/users-repository.port';\nimport { USERS_REPOSITORY } from '../../../../constants';\nimport { User } from '../../../core/domain/user.entity';\nimport { ErrorsEnum } from '../../../core/errors/errors.enum';\n\ndescribe('GetUserUseCase', () => {\n  let useCase: GetUserUseCase;\n  let userRepository: jest.Mocked<UserRepositoryPort>;\n\n  beforeEach(async () => {\n    const mockUserRepository = {\n      save: jest.fn(),\n      findById: jest.fn(),\n      findByEmail: jest.fn(),\n      update: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        GetUserUseCase,\n        {\n          provide: USERS_REPOSITORY,\n          useValue: mockUserRepository,\n        },\n      ],\n    }).compile();\n\n    useCase = module.get<GetUserUseCase>(GetUserUseCase);\n    userRepository = module.get(USERS_REPOSITORY);\n  });\n\n  describe('execute', () => {\n    const mockUser: User = {\n      id: '123e4567-e89b-12d3-a456-426614174000',\n      email: 'test@example.com',\n      password: 'hashedPassword123',\n      name: 'John Doe',\n      city: 'São Paulo',\n      uf: 'SP',\n      zipcode: '01234-567',\n      personType: 'DONOR',\n    };\n\n    it('should return user successfully when user exists', async () => {\n      userRepository.findById.mockResolvedValue(mockUser);\n\n      const result = await useCase.execute(mockUser.id);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(mockUser);\n      expect(userRepository.findById).toHaveBeenCalledWith(mockUser.id);\n    });\n\n    it('should return failure when user does not exist', async () => {\n      const nonExistentId = '987e6543-e21b-34d5-a678-426614174111';\n      userRepository.findById.mockResolvedValue(null);\n\n      const result = await useCase.execute(nonExistentId);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFoundError);\n      expect(userRepository.findById).toHaveBeenCalledWith(nonExistentId);\n    });\n\n    it('should handle different user types', async () => {\n      const donorUser: User = { ...mockUser, personType: 'DONOR' };\n      const companyUser: User = {\n        ...mockUser,\n        id: '456e7890-f12c-45e6-b789-426614174222',\n        personType: 'COMPANY',\n      };\n\n      userRepository.findById\n        .mockResolvedValueOnce(donorUser)\n        .mockResolvedValueOnce(companyUser);\n\n      const donorResult = await useCase.execute(donorUser.id);\n      const companyResult = await useCase.execute(companyUser.id);\n\n      expect(donorResult.isSuccess).toBe(true);\n      expect(donorResult.value?.personType).toBe('DONOR');\n      expect(companyResult.isSuccess).toBe(true);\n      expect(companyResult.value?.personType).toBe('COMPANY');\n    });\n\n    it('should handle users with minimal data', async () => {\n      const minimalUser: User = {\n        id: '123e4567-e89b-12d3-a456-426614174000',\n        email: 'minimal@example.com',\n        name: 'Minimal User',\n        city: 'São Paulo',\n        uf: 'SP',\n        personType: 'DONOR',\n      };\n\n      userRepository.findById.mockResolvedValue(minimalUser);\n\n      const result = await useCase.execute(minimalUser.id);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(minimalUser);\n      expect(result.value?.password).toBeUndefined();\n      expect(result.value?.zipcode).toBeUndefined();\n    });\n\n    it('should handle users from different states', async () => {\n      const states = ['SP', 'RJ', 'MG', 'RS', 'PR', 'SC', 'BA', 'GO'];\n\n      for (const uf of states) {\n        const userFromState: User = {\n          ...mockUser,\n          id: `user-${uf}`,\n          uf,\n          city: `Cidade ${uf}`,\n        };\n\n        userRepository.findById.mockResolvedValue(userFromState);\n\n        const result = await useCase.execute(userFromState.id);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.uf).toBe(uf);\n        expect(result.value?.city).toBe(`Cidade ${uf}`);\n      }\n    });\n\n    it('should handle different UUID formats', async () => {\n      const uuidFormats = [\n        '123e4567-e89b-12d3-a456-426614174000',\n        '987e6543-e21b-34d5-a678-426614174111',\n        '456f7890-f12c-45e6-b789-426614174222',\n        '789a0123-a34b-56c7-d890-426614174333',\n      ];\n\n      for (const id of uuidFormats) {\n        const userWithId: User = { ...mockUser, id };\n        userRepository.findById.mockResolvedValue(userWithId);\n\n        const result = await useCase.execute(id);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.id).toBe(id);\n        expect(userRepository.findById).toHaveBeenCalledWith(id);\n      }\n    });\n\n    it('should handle repository errors gracefully', async () => {\n      const userId = '123e4567-e89b-12d3-a456-426614174000';\n      userRepository.findById.mockRejectedValue(\n        new Error('Database connection failed'),\n      );\n\n      await expect(useCase.execute(userId)).rejects.toThrow(\n        'Database connection failed',\n      );\n      expect(userRepository.findById).toHaveBeenCalledWith(userId);\n    });\n\n    it('should handle empty string ID', async () => {\n      userRepository.findById.mockResolvedValue(null);\n\n      const result = await useCase.execute('');\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFoundError);\n      expect(userRepository.findById).toHaveBeenCalledWith('');\n    });\n\n    it('should handle null return from repository', async () => {\n      const userId = '123e4567-e89b-12d3-a456-426614174000';\n      userRepository.findById.mockResolvedValue(null);\n\n      const result = await useCase.execute(userId);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFoundError);\n    });\n\n    it('should handle undefined return from repository', async () => {\n      const userId = '123e4567-e89b-12d3-a456-426614174000';\n      userRepository.findById.mockResolvedValue(undefined as any);\n\n      const result = await useCase.execute(userId);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.error).toBe(ErrorsEnum.UserNotFoundError);\n    });\n\n    it('should handle users with special characters in names', async () => {\n      const specialCharUser: User = {\n        ...mockUser,\n        name: 'José María Ñuñez',\n        city: 'Poços de Caldas',\n      };\n\n      userRepository.findById.mockResolvedValue(specialCharUser);\n\n      const result = await useCase.execute(specialCharUser.id);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.name).toBe('José María Ñuñez');\n      expect(result.value?.city).toBe('Poços de Caldas');\n    });\n\n    it('should handle users with different zipcode formats', async () => {\n      const zipcodeFormats = ['01234-567', '01234567', '12345-678'];\n\n      for (const zipcode of zipcodeFormats) {\n        const userWithZipcode: User = {\n          ...mockUser,\n          id: `user-${zipcode.replace(/\\D/g, '')}`,\n          zipcode,\n        };\n\n        userRepository.findById.mockResolvedValue(userWithZipcode);\n\n        const result = await useCase.execute(userWithZipcode.id);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.zipcode).toBe(zipcode);\n      }\n    });\n\n    it('should handle users with long names', async () => {\n      const longNameUser: User = {\n        ...mockUser,\n        name: 'João da Silva Santos Oliveira Pereira de Souza Nascimento',\n      };\n\n      userRepository.findById.mockResolvedValue(longNameUser);\n\n      const result = await useCase.execute(longNameUser.id);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value?.name).toBe(longNameUser.name);\n    });\n\n    it('should handle concurrent requests for the same user', async () => {\n      userRepository.findById.mockResolvedValue(mockUser);\n\n      const promises = Array(5)\n        .fill(null)\n        .map(() => useCase.execute(mockUser.id));\n      const results = await Promise.all(promises);\n\n      results.forEach((result) => {\n        expect(result.isSuccess).toBe(true);\n        expect(result.value).toEqual(mockUser);\n      });\n\n      expect(userRepository.findById).toHaveBeenCalledTimes(5);\n    });\n\n    it('should handle different email formats', async () => {\n      const emailFormats = [\n        'user@domain.com',\n        'user.name@domain.co.uk',\n        'user+tag@example.org',\n        'user123@test-domain.com',\n      ];\n\n      for (const email of emailFormats) {\n        const userWithEmail: User = {\n          ...mockUser,\n          id: `user-${email.replace(/[@.+]/g, '-')}`,\n          email,\n        };\n\n        userRepository.findById.mockResolvedValue(userWithEmail);\n\n        const result = await useCase.execute(userWithEmail.id);\n\n        expect(result.isSuccess).toBe(true);\n        expect(result.value?.email).toBe(email);\n      }\n    });\n  });\n});\n"],"names":["describe","useCase","userRepository","beforeEach","mockUserRepository","save","jest","fn","findById","findByEmail","update","module","Test","createTestingModule","providers","GetUserUseCase","provide","USERS_REPOSITORY","useValue","compile","get","mockUser","id","email","password","name","city","uf","zipcode","personType","it","mockResolvedValue","result","execute","expect","isSuccess","toBe","value","toEqual","toHaveBeenCalledWith","nonExistentId","error","ErrorsEnum","UserNotFoundError","donorUser","companyUser","mockResolvedValueOnce","donorResult","companyResult","minimalUser","toBeUndefined","states","userFromState","uuidFormats","userWithId","userId","mockRejectedValue","Error","rejects","toThrow","undefined","specialCharUser","zipcodeFormats","userWithZipcode","replace","longNameUser","promises","Array","fill","map","results","Promise","all","forEach","toHaveBeenCalledTimes","emailFormats","userWithEmail"],"mappings":"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"}