{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/core/service/users.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { GetUserUseCase } from '@/application/ports/in/user/getUser.useCase';\nimport { User } from '../domain/user.entity';\nimport { Result, ResultFactory } from '@/application/types/result.types';\nimport { CreateUserUseCase } from '@/application/ports/in/user/createUser.useCase';\nimport { HashStringUseCase } from '@/modules/Hash/application/ports/in/hashString.useCase';\nimport { GetUserByEmailUseCase } from '@/application/ports/in/user/getUserByEmail.useCase';\nimport { CompareHashUseCase } from '@/modules/Hash/application/ports/in/compareHash.useCase';\nimport { ChangePasswordUseCase } from '@/application/ports/in/user/changePassword.useCase';\nimport { ErrorsEnum } from '../errors/errors.enum';\nimport { CreateDonorUseCase } from '@/application/ports/in/donor/createDonor.useCase';\nimport { CreateUserRequest, PersonType } from '@/application/types/user.types';\nimport { CreateCompanyUseCase } from '@/application/ports/in/company/createCompany.useCase';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    private readonly getUserUseCase: GetUserUseCase,\n    private readonly createUserUseCase: CreateUserUseCase,\n    private readonly hashStringUseCase: HashStringUseCase,\n    private readonly compareHashUseCase: CompareHashUseCase,\n    private readonly getUserByEmailUseCase: GetUserByEmailUseCase,\n    private readonly changePasswordUseCase: ChangePasswordUseCase,\n    private readonly createDonorUseCase: CreateDonorUseCase,\n    private readonly createCompanyUseCase: CreateCompanyUseCase,\n  ) {}\n\n  async getUserById(id: string): Promise<Result<User>> {\n    const user = await this.getUserUseCase.execute(id);\n\n    if (!user.isSuccess) {\n      return ResultFactory.failure(user.error);\n    }\n\n    delete user.value.password;\n\n    return ResultFactory.success(user.value);\n  }\n\n  async createUser(user: CreateUserRequest): Promise<Result<User>> {\n    const hashedPassword = this.hashStringUseCase.execute(user?.password ?? '');\n\n    user.password = hashedPassword;\n\n    const result = await this.createUserUseCase.execute(user);\n\n    if (!result.isSuccess) {\n      return ResultFactory.failure(result.error);\n    }\n\n    if (!user.personType) {\n      return ResultFactory.failure(ErrorsEnum.UserNotFoundError);\n    }\n\n    switch (user.personType) {\n      case PersonType.DONOR: {\n        const donor = await this.createDonorUseCase.execute({\n          cpf: user.cpf,\n          bloodType: user.bloodType,\n          birthDate: user.birthDate,\n          fkUserId: result.value.id,\n        });\n\n        if (!donor.isSuccess) {\n          return ResultFactory.partialSuccess(result.value);\n        }\n\n        break;\n      }\n      case PersonType.COMPANY: {\n        const company = await this.createCompanyUseCase.execute({\n          cnpj: user.cnpj,\n          institutionName: user.institutionName,\n          cnes: user.cnes,\n          fkUserId: result.value.id,\n        });\n\n        if (!company.isSuccess) {\n          return ResultFactory.partialSuccess(result.value);\n        }\n\n        break;\n      }\n    }\n\n    return ResultFactory.success(result.value);\n  }\n\n  async authenticate(\n    user: Pick<User, 'email' | 'password'>,\n  ): Promise<Result<User>> {\n    const findByEmail = await this.getUserByEmailUseCase.execute(user.email);\n\n    if (!findByEmail.isSuccess) {\n      return ResultFactory.failure(findByEmail.error);\n    }\n\n    const verifyPassword = this.compareHashUseCase.execute({\n      password: user.password ?? '',\n      hash: findByEmail?.value?.password ?? '',\n    });\n\n    if (!verifyPassword) {\n      return ResultFactory.failure(ErrorsEnum.InvalidPassword);\n    }\n\n    delete findByEmail.value.password;\n\n    return ResultFactory.success(findByEmail.value);\n  }\n\n  async changePassword(\n    id: string,\n    passwords: { old: string; new: string },\n  ): Promise<Result<User>> {\n    const getUser = await this.getUserUseCase.execute(id);\n\n    if (!getUser.isSuccess) {\n      return ResultFactory.failure(getUser.error);\n    }\n\n    const verifyPassword = this.compareHashUseCase.execute({\n      password: passwords.old,\n      hash: getUser.value.password ?? '',\n    });\n\n    if (!verifyPassword) {\n      return ResultFactory.failure(ErrorsEnum.InvalidPassword);\n    }\n\n    const newPassword = this.hashStringUseCase.execute(passwords.new);\n\n    const result = await this.changePasswordUseCase.execute({\n      id,\n      newPassword,\n    });\n\n    if (!result.isSuccess) {\n      return ResultFactory.failure(result.error);\n    }\n\n    return ResultFactory.success(result.value);\n  }\n}\n"],"names":["UsersService","getUserById","id","user","getUserUseCase","execute","isSuccess","ResultFactory","failure","error","value","password","success","createUser","hashedPassword","hashStringUseCase","result","createUserUseCase","personType","ErrorsEnum","UserNotFoundError","PersonType","DONOR","donor","createDonorUseCase","cpf","bloodType","birthDate","fkUserId","partialSuccess","COMPANY","company","createCompanyUseCase","cnpj","institutionName","cnes","authenticate","findByEmail","getUserByEmailUseCase","email","verifyPassword","compareHashUseCase","hash","InvalidPassword","changePassword","passwords","getUser","old","newPassword","new","changePasswordUseCase"],"mappings":"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"}