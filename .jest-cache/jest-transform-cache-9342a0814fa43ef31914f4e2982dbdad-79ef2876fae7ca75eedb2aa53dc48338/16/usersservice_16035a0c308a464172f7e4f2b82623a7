0f6ed2417c154410055805b4d64b9d56
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "UsersService", {
    enumerable: true,
    get: function() {
        return UsersService;
    }
});
const _common = require("@nestjs/common");
const _getUseruseCase = require("@/application/ports/in/user/getUser.useCase");
const _resulttypes = require("@/application/types/result.types");
const _createUseruseCase = require("@/application/ports/in/user/createUser.useCase");
const _hashStringuseCase = require("@/modules/Hash/application/ports/in/hashString.useCase");
const _getUserByEmailuseCase = require("@/application/ports/in/user/getUserByEmail.useCase");
const _compareHashuseCase = require("@/modules/Hash/application/ports/in/compareHash.useCase");
const _changePassworduseCase = require("@/application/ports/in/user/changePassword.useCase");
const _errorsenum = require("../errors/errors.enum");
const _createDonoruseCase = require("@/application/ports/in/donor/createDonor.useCase");
const _usertypes = require("@/application/types/user.types");
const _createCompanyuseCase = require("@/application/ports/in/company/createCompany.useCase");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function _ts_metadata(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}
let UsersService = class UsersService {
    async getUserById(id) {
        const user = await this.getUserUseCase.execute(id);
        if (!user.isSuccess) {
            return _resulttypes.ResultFactory.failure(user.error);
        }
        delete user.value.password;
        return _resulttypes.ResultFactory.success(user.value);
    }
    async createUser(user) {
        const hashedPassword = this.hashStringUseCase.execute(user?.password ?? '');
        user.password = hashedPassword;
        const result = await this.createUserUseCase.execute(user);
        if (!result.isSuccess) {
            return _resulttypes.ResultFactory.failure(result.error);
        }
        if (!user.personType) {
            return _resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.UserNotFoundError);
        }
        switch(user.personType){
            case _usertypes.PersonType.DONOR:
                {
                    const donor = await this.createDonorUseCase.execute({
                        cpf: user.cpf,
                        bloodType: user.bloodType,
                        birthDate: user.birthDate,
                        fkUserId: result.value.id
                    });
                    if (!donor.isSuccess) {
                        return _resulttypes.ResultFactory.partialSuccess(result.value);
                    }
                    break;
                }
            case _usertypes.PersonType.COMPANY:
                {
                    const company = await this.createCompanyUseCase.execute({
                        cnpj: user.cnpj,
                        institutionName: user.institutionName,
                        cnes: user.cnes,
                        fkUserId: result.value.id
                    });
                    if (!company.isSuccess) {
                        return _resulttypes.ResultFactory.partialSuccess(result.value);
                    }
                    break;
                }
        }
        return _resulttypes.ResultFactory.success(result.value);
    }
    async authenticate(user) {
        const findByEmail = await this.getUserByEmailUseCase.execute(user.email);
        if (!findByEmail.isSuccess) {
            return _resulttypes.ResultFactory.failure(findByEmail.error);
        }
        const verifyPassword = this.compareHashUseCase.execute({
            password: user.password ?? '',
            hash: findByEmail?.value?.password ?? ''
        });
        if (!verifyPassword) {
            return _resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.InvalidPassword);
        }
        delete findByEmail.value.password;
        return _resulttypes.ResultFactory.success(findByEmail.value);
    }
    async changePassword(id, passwords) {
        const getUser = await this.getUserUseCase.execute(id);
        if (!getUser.isSuccess) {
            return _resulttypes.ResultFactory.failure(getUser.error);
        }
        const verifyPassword = this.compareHashUseCase.execute({
            password: passwords.old,
            hash: getUser.value.password ?? ''
        });
        if (!verifyPassword) {
            return _resulttypes.ResultFactory.failure(_errorsenum.ErrorsEnum.InvalidPassword);
        }
        const newPassword = this.hashStringUseCase.execute(passwords.new);
        const result = await this.changePasswordUseCase.execute({
            id,
            newPassword
        });
        if (!result.isSuccess) {
            return _resulttypes.ResultFactory.failure(result.error);
        }
        return _resulttypes.ResultFactory.success(result.value);
    }
    constructor(getUserUseCase, createUserUseCase, hashStringUseCase, compareHashUseCase, getUserByEmailUseCase, changePasswordUseCase, createDonorUseCase, createCompanyUseCase){
        _define_property(this, "getUserUseCase", void 0);
        _define_property(this, "createUserUseCase", void 0);
        _define_property(this, "hashStringUseCase", void 0);
        _define_property(this, "compareHashUseCase", void 0);
        _define_property(this, "getUserByEmailUseCase", void 0);
        _define_property(this, "changePasswordUseCase", void 0);
        _define_property(this, "createDonorUseCase", void 0);
        _define_property(this, "createCompanyUseCase", void 0);
        this.getUserUseCase = getUserUseCase;
        this.createUserUseCase = createUserUseCase;
        this.hashStringUseCase = hashStringUseCase;
        this.compareHashUseCase = compareHashUseCase;
        this.getUserByEmailUseCase = getUserByEmailUseCase;
        this.changePasswordUseCase = changePasswordUseCase;
        this.createDonorUseCase = createDonorUseCase;
        this.createCompanyUseCase = createCompanyUseCase;
    }
};
UsersService = _ts_decorate([
    (0, _common.Injectable)(),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", [
        typeof _getUseruseCase.GetUserUseCase === "undefined" ? Object : _getUseruseCase.GetUserUseCase,
        typeof _createUseruseCase.CreateUserUseCase === "undefined" ? Object : _createUseruseCase.CreateUserUseCase,
        typeof _hashStringuseCase.HashStringUseCase === "undefined" ? Object : _hashStringuseCase.HashStringUseCase,
        typeof _compareHashuseCase.CompareHashUseCase === "undefined" ? Object : _compareHashuseCase.CompareHashUseCase,
        typeof _getUserByEmailuseCase.GetUserByEmailUseCase === "undefined" ? Object : _getUserByEmailuseCase.GetUserByEmailUseCase,
        typeof _changePassworduseCase.ChangePasswordUseCase === "undefined" ? Object : _changePassworduseCase.ChangePasswordUseCase,
        typeof _createDonoruseCase.CreateDonorUseCase === "undefined" ? Object : _createDonoruseCase.CreateDonorUseCase,
        typeof _createCompanyuseCase.CreateCompanyUseCase === "undefined" ? Object : _createCompanyuseCase.CreateCompanyUseCase
    ])
], UsersService);

//# sourceMappingURL=data:application/json;base64,