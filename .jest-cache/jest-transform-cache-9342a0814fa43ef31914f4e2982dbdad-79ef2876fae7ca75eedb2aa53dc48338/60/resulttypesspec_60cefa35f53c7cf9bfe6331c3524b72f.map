{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/types/result.types.spec.ts"],"sourcesContent":["import { ResultFactory } from './result.types';\nimport { ErrorsEnum } from '../core/errors/errors.enum';\n\ndescribe('ResultFactory', () => {\n  describe('success', () => {\n    it('should create a successful result with value', () => {\n      const value = { id: '1', name: 'Test' };\n      const result = ResultFactory.success(value);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toBe(value);\n      expect(result.error).toBeUndefined();\n      expect(result.isPartialSuccess).toBeUndefined();\n    });\n\n    it('should create a successful result with null value', () => {\n      const result = ResultFactory.success(null);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toBeNull();\n      expect(result.error).toBeUndefined();\n    });\n\n    it('should create a successful result with undefined value', () => {\n      const result = ResultFactory.success(undefined);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toBeUndefined();\n      expect(result.error).toBeUndefined();\n    });\n  });\n\n  describe('failure', () => {\n    it('should create a failure result with error', () => {\n      const error = ErrorsEnum.UserNotFoundError;\n      const result = ResultFactory.failure(error);\n\n      expect(result.isSuccess).toBe(false);\n      expect(result.value).toBeUndefined();\n      expect(result.error).toBe(error);\n      expect(result.isPartialSuccess).toBeUndefined();\n    });\n\n    it('should create a failure result with different error types', () => {\n      const errors = [\n        ErrorsEnum.InvalidPassword,\n        ErrorsEnum.UserAlreadyExists,\n        ErrorsEnum.CompanyNotFoundError,\n        ErrorsEnum.DonorNotFoundError,\n      ];\n\n      errors.forEach((error) => {\n        const result = ResultFactory.failure(error);\n        expect(result.isSuccess).toBe(false);\n        expect(result.error).toBe(error);\n      });\n    });\n  });\n\n  describe('partialSuccess', () => {\n    it('should create a partial success result with value', () => {\n      const value = { id: '1', name: 'Test' };\n      const result = ResultFactory.partialSuccess(value);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toBe(value);\n      expect(result.error).toBeUndefined();\n      expect(result.isPartialSuccess).toBe(true);\n    });\n\n    it('should create a partial success result with complex object', () => {\n      const value = {\n        user: { id: '1', email: 'test@test.com' },\n        metadata: { created: true, updated: false },\n      };\n      const result = ResultFactory.partialSuccess(value);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.value).toEqual(value);\n      expect(result.isPartialSuccess).toBe(true);\n    });\n  });\n\n  describe('type guards', () => {\n    it('should properly identify success results', () => {\n      const successResult = ResultFactory.success('test');\n      const failureResult = ResultFactory.failure(ErrorsEnum.UserNotFoundError);\n      const partialResult = ResultFactory.partialSuccess('test');\n\n      expect(successResult.isSuccess).toBe(true);\n      expect(failureResult.isSuccess).toBe(false);\n      expect(partialResult.isSuccess).toBe(true);\n    });\n\n    it('should properly identify partial success results', () => {\n      const successResult = ResultFactory.success('test');\n      const partialResult = ResultFactory.partialSuccess('test');\n\n      expect(successResult.isPartialSuccess).toBeFalsy();\n      expect(partialResult.isPartialSuccess).toBe(true);\n    });\n  });\n});\n"],"names":["describe","it","value","id","name","result","ResultFactory","success","expect","isSuccess","toBe","error","toBeUndefined","isPartialSuccess","toBeNull","undefined","ErrorsEnum","UserNotFoundError","failure","errors","InvalidPassword","UserAlreadyExists","CompanyNotFoundError","DonorNotFoundError","forEach","partialSuccess","user","email","metadata","created","updated","toEqual","successResult","failureResult","partialResult","toBeFalsy"],"mappings":"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"}