{"version":3,"sources":["/Users/ysraelmoreno/Documents/codes/fatec/sangue-solidario/users-service/src/application/ports/in/user/getUser.useCase.ts"],"sourcesContent":["import { USERS_REPOSITORY } from '@/constants';\nimport { UserRepositoryPort } from '../../out/users-repository.port';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { User } from '@/application/core/domain/user.entity';\nimport { UseCase } from '@/application/types/useCase.types';\nimport { Result, ResultFactory } from '@/application/types/result.types';\nimport { ErrorsEnum } from '@/application/core/errors/errors.enum';\n\n@Injectable()\nexport class GetUserUseCase implements UseCase<string, Promise<Result<User>>> {\n  constructor(\n    @Inject(USERS_REPOSITORY)\n    private readonly usersRepository: UserRepositoryPort,\n  ) {}\n\n  async execute(id: string): Promise<Result<User>> {\n    const user = await this.usersRepository.findById(id);\n\n    if (!user) {\n      return ResultFactory.failure(ErrorsEnum.UserNotFoundError);\n    }\n\n    return ResultFactory.success(user);\n  }\n}\n"],"names":["GetUserUseCase","execute","id","user","usersRepository","findById","ResultFactory","failure","ErrorsEnum","UserNotFoundError","success"],"mappings":";;;;+BASaA;;;eAAAA;;;2BAToB;qCACE;wBACA;6BAGG;4BACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGpB,IAAA,AAAMA,iBAAN,MAAMA;IAMX,MAAMC,QAAQC,EAAU,EAAyB;QAC/C,MAAMC,OAAO,MAAM,IAAI,CAACC,eAAe,CAACC,QAAQ,CAACH;QAEjD,IAAI,CAACC,MAAM;YACT,OAAOG,0BAAa,CAACC,OAAO,CAACC,sBAAU,CAACC,iBAAiB;QAC3D;QAEA,OAAOH,0BAAa,CAACI,OAAO,CAACP;IAC/B;IAbA,YACE,AACiBC,eAAmC,CACpD;;aADiBA,kBAAAA;IAChB;AAWL"}